This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
build.gradle
proguard-rules.pro
schemas/com.example.contentful_javasilver.data.AppDatabase/1.json
schemas/com.example.contentful_javasilver.data.local.AppDatabase/1.json
schemas/com.example.contentful_javasilver.data.QuizDatabase/1.json
schemas/com.example.contentful_javasilver.data.QuizDatabase/2.json
schemas/com.example.contentful_javasilver.data.QuizDatabase/3.json
schemas/com.example.contentful_javasilver.data.QuizDatabase/4.json
schemas/com.example.contentful_javasilver.data.QuizDatabase/5.json
src/androidTest/java/com/example/contentful_javasilver/ExampleInstrumentedTest.java
src/main/AndroidManifest.xml
src/main/java/com/example/contentful_javasilver/adapter/CategoryAdapter.java
src/main/java/com/example/contentful_javasilver/AsyncHelperCoroutines.kt
src/main/java/com/example/contentful_javasilver/CategoryFragment.java
src/main/java/com/example/contentful_javasilver/CategorySelectActivity.java
src/main/java/com/example/contentful_javasilver/ChapterFragment.java
src/main/java/com/example/contentful_javasilver/ChapterSelectActivity.java
src/main/java/com/example/contentful_javasilver/ContentfulGetApi.java
src/main/java/com/example/contentful_javasilver/data/DatabaseTransaction.kt
src/main/java/com/example/contentful_javasilver/data/QuizDao.java
src/main/java/com/example/contentful_javasilver/data/QuizDatabase.java
src/main/java/com/example/contentful_javasilver/data/QuizEntity.java
src/main/java/com/example/contentful_javasilver/DatabaseHelperCoroutines.kt
src/main/java/com/example/contentful_javasilver/HomeActivity.java
src/main/java/com/example/contentful_javasilver/HomeFragment.java
src/main/java/com/example/contentful_javasilver/LoadingActivity.java
src/main/java/com/example/contentful_javasilver/LoadingFragment.java
src/main/java/com/example/contentful_javasilver/MainActivity.java
src/main/java/com/example/contentful_javasilver/QuestionCategoryFragment.java
src/main/java/com/example/contentful_javasilver/QuestionCategorySelectActivity.java
src/main/java/com/example/contentful_javasilver/QuizActivity.java
src/main/java/com/example/contentful_javasilver/QuizFragment.java
src/main/java/com/example/contentful_javasilver/SettingsFragment.java
src/main/java/com/example/contentful_javasilver/StartActivity.java
src/main/java/com/example/contentful_javasilver/StartFragment.java
src/main/java/com/example/contentful_javasilver/utils/SecurePreferences.java
src/main/java/com/example/contentful_javasilver/viewmodels/QuizViewModel.java
src/main/res/anim/slide_in_left.xml
src/main/res/anim/slide_in_right.xml
src/main/res/anim/slide_out_left.xml
src/main/res/anim/slide_out_right.xml
src/main/res/drawable/button_background_small.xml
src/main/res/drawable/button_background.xml
src/main/res/drawable/ic_arrow_back.xml
src/main/res/drawable/ic_arrow_forward.xml
src/main/res/drawable/ic_book.xml
src/main/res/drawable/ic_bookmark.xml
src/main/res/drawable/ic_category.xml
src/main/res/drawable/ic_chapter.xml
src/main/res/drawable/ic_history.xml
src/main/res/drawable/ic_home.xml
src/main/res/drawable/ic_launcher_background.xml
src/main/res/drawable/ic_launcher_foreground.xml
src/main/res/drawable/ic_list.xml
src/main/res/drawable/ic_settings.xml
src/main/res/drawable/ic_shuffle.xml
src/main/res/drawable/jcv_logo.xml
src/main/res/drawable/start_button_background.xml
src/main/res/layout/activity_category_select.xml
src/main/res/layout/activity_chapter_select.xml
src/main/res/layout/activity_home.xml
src/main/res/layout/activity_loading.xml
src/main/res/layout/activity_main.xml
src/main/res/layout/activity_question_category_select.xml
src/main/res/layout/activity_quiz.xml
src/main/res/layout/activity_result.xml
src/main/res/layout/activity_start.xml
src/main/res/layout/fragment_category.xml
src/main/res/layout/fragment_chapter.xml
src/main/res/layout/fragment_home.xml
src/main/res/layout/fragment_loading.xml
src/main/res/layout/fragment_question_category.xml
src/main/res/layout/fragment_quiz.xml
src/main/res/layout/fragment_settings.xml
src/main/res/layout/fragment_start.xml
src/main/res/layout/item_category.xml
src/main/res/layout/item_question_category.xml
src/main/res/menu/bottom_navigation_menu.xml
src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
src/main/res/mipmap-anydpi-v26/ic_launcher.xml
src/main/res/navigation/nav_graph.xml
src/main/res/values-night/themes.xml
src/main/res/values/colors.xml
src/main/res/values/ids.xml
src/main/res/values/strings.xml
src/main/res/values/themes.xml
src/main/res/xml/backup_rules.xml
src/main/res/xml/data_extraction_rules.xml
src/test/java/com/example/contentful_javasilver/ExampleUnitTest.java

================================================================
Files
================================================================

================
File: proguard-rules.pro
================
# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile

================
File: schemas/com.example.contentful_javasilver.data.AppDatabase/1.json
================
{
  "formatVersion": 1,
  "database": {
    "version": 1,
    "identityHash": "873268525f8d4c85593253df051da9fc",
    "entities": [
      {
        "tableName": "quiz_table",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`qid` TEXT NOT NULL, `chapter` TEXT, `category` TEXT, `questionCategory` TEXT, `difficulty` TEXT, `code` TEXT, `questionText` TEXT, `choices` TEXT, `answer` TEXT, `explanation` TEXT, `updatedAt` INTEGER NOT NULL, PRIMARY KEY(`qid`))",
        "fields": [
          {
            "fieldPath": "qid",
            "columnName": "qid",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "chapter",
            "columnName": "chapter",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "category",
            "columnName": "category",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionCategory",
            "columnName": "questionCategory",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "difficulty",
            "columnName": "difficulty",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "code",
            "columnName": "code",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionText",
            "columnName": "questionText",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "choices",
            "columnName": "choices",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "answer",
            "columnName": "answer",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "explanation",
            "columnName": "explanation",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "updatedAt",
            "columnName": "updatedAt",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "qid"
          ]
        },
        "indices": [],
        "foreignKeys": []
      }
    ],
    "views": [],
    "setupQueries": [
      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '873268525f8d4c85593253df051da9fc')"
    ]
  }
}

================
File: schemas/com.example.contentful_javasilver.data.local.AppDatabase/1.json
================
{
  "formatVersion": 1,
  "database": {
    "version": 1,
    "identityHash": "5763030b3559509a9a6e5b71bd5c1936",
    "entities": [
      {
        "tableName": "quizzes",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`qid` TEXT NOT NULL, `chapter` TEXT, `category` TEXT, `question_category` TEXT, `difficulty` TEXT, `question_text` TEXT, `choices` TEXT, `answer` TEXT, `explanation` TEXT, PRIMARY KEY(`qid`))",
        "fields": [
          {
            "fieldPath": "qid",
            "columnName": "qid",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "chapter",
            "columnName": "chapter",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "category",
            "columnName": "category",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionCategory",
            "columnName": "question_category",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "difficulty",
            "columnName": "difficulty",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionText",
            "columnName": "question_text",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "choices",
            "columnName": "choices",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "answer",
            "columnName": "answer",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "explanation",
            "columnName": "explanation",
            "affinity": "TEXT",
            "notNull": false
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "qid"
          ]
        },
        "indices": [],
        "foreignKeys": []
      }
    ],
    "views": [],
    "setupQueries": [
      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '5763030b3559509a9a6e5b71bd5c1936')"
    ]
  }
}

================
File: schemas/com.example.contentful_javasilver.data.QuizDatabase/1.json
================
{
  "formatVersion": 1,
  "database": {
    "version": 1,
    "identityHash": "385142fb8e3eeb43c0cad167e5b124d3",
    "entities": [
      {
        "tableName": "quizzes",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`qid` TEXT NOT NULL, `chapter` TEXT, `category` TEXT, `questionCategory` TEXT, `difficulty` TEXT, `code` TEXT, `questionText` TEXT, `choices` TEXT, `answer` TEXT, `explanation` TEXT, `updatedAt` INTEGER NOT NULL, PRIMARY KEY(`qid`))",
        "fields": [
          {
            "fieldPath": "qid",
            "columnName": "qid",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "chapter",
            "columnName": "chapter",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "category",
            "columnName": "category",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionCategory",
            "columnName": "questionCategory",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "difficulty",
            "columnName": "difficulty",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "code",
            "columnName": "code",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionText",
            "columnName": "questionText",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "choices",
            "columnName": "choices",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "answer",
            "columnName": "answer",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "explanation",
            "columnName": "explanation",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "updatedAt",
            "columnName": "updatedAt",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "qid"
          ]
        },
        "indices": [],
        "foreignKeys": []
      }
    ],
    "views": [],
    "setupQueries": [
      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '385142fb8e3eeb43c0cad167e5b124d3')"
    ]
  }
}

================
File: schemas/com.example.contentful_javasilver.data.QuizDatabase/2.json
================
{
  "formatVersion": 1,
  "database": {
    "version": 2,
    "identityHash": "385142fb8e3eeb43c0cad167e5b124d3",
    "entities": [
      {
        "tableName": "quizzes",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`qid` TEXT NOT NULL, `chapter` TEXT, `category` TEXT, `questionCategory` TEXT, `difficulty` TEXT, `code` TEXT, `questionText` TEXT, `choices` TEXT, `answer` TEXT, `explanation` TEXT, `updatedAt` INTEGER NOT NULL, PRIMARY KEY(`qid`))",
        "fields": [
          {
            "fieldPath": "qid",
            "columnName": "qid",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "chapter",
            "columnName": "chapter",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "category",
            "columnName": "category",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionCategory",
            "columnName": "questionCategory",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "difficulty",
            "columnName": "difficulty",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "code",
            "columnName": "code",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionText",
            "columnName": "questionText",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "choices",
            "columnName": "choices",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "answer",
            "columnName": "answer",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "explanation",
            "columnName": "explanation",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "updatedAt",
            "columnName": "updatedAt",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "qid"
          ]
        },
        "indices": [],
        "foreignKeys": []
      }
    ],
    "views": [],
    "setupQueries": [
      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '385142fb8e3eeb43c0cad167e5b124d3')"
    ]
  }
}

================
File: schemas/com.example.contentful_javasilver.data.QuizDatabase/3.json
================
{
  "formatVersion": 1,
  "database": {
    "version": 3,
    "identityHash": "385142fb8e3eeb43c0cad167e5b124d3",
    "entities": [
      {
        "tableName": "quizzes",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`qid` TEXT NOT NULL, `chapter` TEXT, `category` TEXT, `questionCategory` TEXT, `difficulty` TEXT, `code` TEXT, `questionText` TEXT, `choices` TEXT, `answer` TEXT, `explanation` TEXT, `updatedAt` INTEGER NOT NULL, PRIMARY KEY(`qid`))",
        "fields": [
          {
            "fieldPath": "qid",
            "columnName": "qid",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "chapter",
            "columnName": "chapter",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "category",
            "columnName": "category",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionCategory",
            "columnName": "questionCategory",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "difficulty",
            "columnName": "difficulty",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "code",
            "columnName": "code",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionText",
            "columnName": "questionText",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "choices",
            "columnName": "choices",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "answer",
            "columnName": "answer",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "explanation",
            "columnName": "explanation",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "updatedAt",
            "columnName": "updatedAt",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "qid"
          ]
        },
        "indices": [],
        "foreignKeys": []
      }
    ],
    "views": [],
    "setupQueries": [
      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '385142fb8e3eeb43c0cad167e5b124d3')"
    ]
  }
}

================
File: schemas/com.example.contentful_javasilver.data.QuizDatabase/4.json
================
{
  "formatVersion": 1,
  "database": {
    "version": 4,
    "identityHash": "385142fb8e3eeb43c0cad167e5b124d3",
    "entities": [
      {
        "tableName": "quizzes",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`qid` TEXT NOT NULL, `chapter` TEXT, `category` TEXT, `questionCategory` TEXT, `difficulty` TEXT, `code` TEXT, `questionText` TEXT, `choices` TEXT, `answer` TEXT, `explanation` TEXT, `updatedAt` INTEGER NOT NULL, PRIMARY KEY(`qid`))",
        "fields": [
          {
            "fieldPath": "qid",
            "columnName": "qid",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "chapter",
            "columnName": "chapter",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "category",
            "columnName": "category",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionCategory",
            "columnName": "questionCategory",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "difficulty",
            "columnName": "difficulty",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "code",
            "columnName": "code",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionText",
            "columnName": "questionText",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "choices",
            "columnName": "choices",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "answer",
            "columnName": "answer",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "explanation",
            "columnName": "explanation",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "updatedAt",
            "columnName": "updatedAt",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "qid"
          ]
        },
        "indices": [],
        "foreignKeys": []
      }
    ],
    "views": [],
    "setupQueries": [
      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '385142fb8e3eeb43c0cad167e5b124d3')"
    ]
  }
}

================
File: schemas/com.example.contentful_javasilver.data.QuizDatabase/5.json
================
{
  "formatVersion": 1,
  "database": {
    "version": 5,
    "identityHash": "8151e2ce2cfd9a732e35b801b6c0301b",
    "entities": [
      {
        "tableName": "quizzes",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`qid` TEXT NOT NULL, `chapter` TEXT, `category` TEXT, `questionCategory` TEXT, `difficulty` TEXT, `code` TEXT, `questionText` TEXT, `choices` TEXT, `answer` TEXT, `explanation` TEXT, `updatedAt` INTEGER NOT NULL, PRIMARY KEY(`qid`))",
        "fields": [
          {
            "fieldPath": "qid",
            "columnName": "qid",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "chapter",
            "columnName": "chapter",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "category",
            "columnName": "category",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionCategory",
            "columnName": "questionCategory",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "difficulty",
            "columnName": "difficulty",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "code",
            "columnName": "code",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "questionText",
            "columnName": "questionText",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "choices",
            "columnName": "choices",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "answer",
            "columnName": "answer",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "explanation",
            "columnName": "explanation",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "updatedAt",
            "columnName": "updatedAt",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "qid"
          ]
        },
        "indices": [
          {
            "name": "index_quizzes_category",
            "unique": false,
            "columnNames": [
              "category"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_quizzes_category` ON `${TABLE_NAME}` (`category`)"
          },
          {
            "name": "index_quizzes_chapter",
            "unique": false,
            "columnNames": [
              "chapter"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_quizzes_chapter` ON `${TABLE_NAME}` (`chapter`)"
          },
          {
            "name": "index_quizzes_questionCategory",
            "unique": false,
            "columnNames": [
              "questionCategory"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_quizzes_questionCategory` ON `${TABLE_NAME}` (`questionCategory`)"
          }
        ],
        "foreignKeys": []
      }
    ],
    "views": [],
    "setupQueries": [
      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '8151e2ce2cfd9a732e35b801b6c0301b')"
    ]
  }
}

================
File: src/androidTest/java/com/example/contentful_javasilver/ExampleInstrumentedTest.java
================
package com.example.contentful_javasilver;

import android.content.Context;

import androidx.test.platform.app.InstrumentationRegistry;
import androidx.test.ext.junit.runners.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import static org.junit.Assert.*;

/**
 * Instrumented test, which will execute on an Android device.
 *
 * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
 */
@RunWith(AndroidJUnit4.class)
public class ExampleInstrumentedTest {
    @Test
    public void useAppContext() {
        // Context of the app under test.
        Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();
        assertEquals("com.example.contentful_javasilver", appContext.getPackageName());
    }
}

================
File: src/main/AndroidManifest.xml
================
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.ContentfulJavasilver"
        android:usesCleartextTraffic="true"
        tools:targetApi="31">
        
        <!-- メインアクティビティ -->
        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        
        <!-- 既存のアクティビティ（徐々にフラグメントに移行） -->
        <activity
            android:name=".StartActivity"
            android:exported="false" />
        <activity
            android:name=".LoadingActivity"
            android:exported="false" />
        <activity
            android:name=".HomeActivity"
            android:exported="false" />
        <!-- <activity android:name=".QuizActivity" android:exported="false" />
        <activity android:name=".ChapterSelectActivity" android:exported="false" />
        <activity android:name=".CategorySelectActivity" android:exported="false" />
        <activity android:name=".QuestionCategorySelectActivity" android:exported="false" /> -->
    </application>

</manifest>

================
File: src/main/java/com/example/contentful_javasilver/adapter/CategoryAdapter.java
================
package com.example.contentful_javasilver.adapter;

import android.view.LayoutInflater;
import android.view.ViewGroup;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.DiffUtil;
import androidx.recyclerview.widget.ListAdapter;
import androidx.recyclerview.widget.RecyclerView;

import com.example.contentful_javasilver.databinding.ItemCategoryBinding;

public class CategoryAdapter extends ListAdapter<String, CategoryAdapter.CategoryViewHolder> {
    private final CategoryClickListener listener;

    public interface CategoryClickListener {
        void onCategoryClick(String category);
    }

    public CategoryAdapter(CategoryClickListener listener) {
        super(new DiffUtil.ItemCallback<String>() {
            @Override
            public boolean areItemsTheSame(@NonNull String oldItem, @NonNull String newItem) {
                return oldItem.equals(newItem);
            }

            @Override
            public boolean areContentsTheSame(@NonNull String oldItem, @NonNull String newItem) {
                return oldItem.equals(newItem);
            }
        });
        this.listener = listener;
    }

    @NonNull
    @Override
    public CategoryViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        ItemCategoryBinding binding = ItemCategoryBinding.inflate(
            LayoutInflater.from(parent.getContext()), parent, false);
        return new CategoryViewHolder(binding);
    }

    @Override
    public void onBindViewHolder(@NonNull CategoryViewHolder holder, int position) {
        String category = getItem(position);
        holder.bind(category);
    }

    class CategoryViewHolder extends RecyclerView.ViewHolder {
        private final ItemCategoryBinding binding;

        CategoryViewHolder(ItemCategoryBinding binding) {
            super(binding.getRoot());
            this.binding = binding;
        }

        void bind(String category) {
            binding.categoryTitleText.setText(category);
            binding.getRoot().setOnClickListener(v -> listener.onCategoryClick(category));
        }
    }
}

================
File: src/main/java/com/example/contentful_javasilver/AsyncHelperCoroutines.kt
================
package com.example.contentful_javasilver

import com.contentful.java.cda.CDAEntry
import com.contentful.java.cda.CDAClient
import kotlinx.coroutines.*
import java.util.concurrent.CompletableFuture
import java.io.IOException
import java.net.SocketTimeoutException
import java.net.UnknownHostException
import com.example.contentful_javasilver.data.QuizDatabase
import com.example.contentful_javasilver.data.QuizEntity
import com.example.contentful_javasilver.data.QuizDao
import kotlin.Unit
import android.util.Log

class AsyncHelperCoroutines(private val api: ContentfulGetApi?) {

    private val scope = CoroutineScope(Dispatchers.IO + SupervisorJob())

    // エラーメッセージの定数
    companion object {
        private const val ERROR_NETWORK = "ネットワークエラーが発生しました。インターネット接続を確認してください。"
        private const val ERROR_TIMEOUT = "通信がタイムアウトしました。もう一度お試しください。"
        private const val ERROR_SERVER = "サーバーエラーが発生しました。しばらく時間をおいて再度お試しください。"
        private const val ERROR_UNKNOWN = "予期せぬエラーが発生しました。"
    }

    // エラーハンドリング用の関数
    private fun handleError(e: Exception): String {
        return when (e) {
            is IOException -> ERROR_NETWORK
            is SocketTimeoutException -> ERROR_TIMEOUT
            is UnknownHostException -> ERROR_NETWORK
            else -> ERROR_UNKNOWN
        }
    }

    // 🔹 コールバック方式（Java から簡単に呼び出せる）
    fun fetchEntriesAsync(contentType: String, callback: (List<CDAEntry>) -> Unit, errorCallback: (String) -> Unit) {
        requireNotNull(api) { "API instance is required for this operation" }
        scope.launch {
            try {
                val result = api?.fetchEntries(contentType)?.items()?.map { it as CDAEntry } ?: emptyList()
                withContext(Dispatchers.Main) {
                    callback(result)
                }
            } catch (e: Exception) {
                e.printStackTrace()
                withContext(Dispatchers.Main) {
                    errorCallback(handleError(e))
                }
            }
        }
    }

    // 🔹 CompletableFuture 方式（Java からも扱いやすい）
    fun fetchEntriesFuture(contentType: String): CompletableFuture<List<CDAEntry>> {
        requireNotNull(api) { "API instance is required for this operation" }
        val future = CompletableFuture<List<CDAEntry>>()
        scope.launch {
            try {
                val result = api?.fetchEntries(contentType)?.items()?.map { it as CDAEntry } ?: emptyList()
                future.complete(result)
            } catch (e: Exception) {
                e.printStackTrace()
                future.completeExceptionally(e)
            }
        }
        return future
    }

    // 🔹 特定のエントリを非同期取得（コールバック）
    fun fetchEntryByIdAsync(entryId: String, callback: (CDAEntry?) -> Unit, errorCallback: (String) -> Unit) {
        requireNotNull(api) { "API instance is required for this operation" }
        scope.launch {
            try {
                val result = api?.fetchEntryById(entryId)
                withContext(Dispatchers.Main) {
                    callback(result)
                }
            } catch (e: Exception) {
                e.printStackTrace()
                withContext(Dispatchers.Main) {
                    errorCallback(handleError(e))
                    callback(null)
                }
            }
        }
    }

    // 🔹 CompletableFuture 方式で特定のエントリを取得
    fun fetchEntryByIdFuture(entryId: String): CompletableFuture<CDAEntry?> {
        requireNotNull(api) { "API instance is required for this operation" }
        val future = CompletableFuture<CDAEntry?>()
        scope.launch {
            try {
                val result = api?.fetchEntryById(entryId)
                future.complete(result)
            } catch (e: Exception) {
                e.printStackTrace()
                future.completeExceptionally(e)
            }
        }
        return future
    }

    // 🔹 データベース操作用のメソッド
    fun insertQuizEntitiesAsync(db: QuizDatabase, entities: List<QuizEntity>, onSuccess: Function0<Unit>, onError: Function1<String, Unit>) {
        scope.launch {
            try {
                db.quizDao().insertAll(entities)
                withContext(Dispatchers.Main) {
                    onSuccess.invoke()
                }
            } catch (e: Exception) {
                e.printStackTrace()
                withContext(Dispatchers.Main) {
                    onError.invoke("データベースの更新に失敗しました")
                }
            }
        }
    }

    fun getRandomQuizzesAsync(db: QuizDatabase, count: Int, onSuccess: Function1<List<QuizEntity>, Unit>, onError: Function1<String, Unit>) {
        scope.launch {
            try {
                val quizzes = db.quizDao().getRandomQuizzesSync(count)
                withContext(Dispatchers.Main) {
                    onSuccess.invoke(quizzes)
                }
            } catch (e: Exception) {
                e.printStackTrace()
                withContext(Dispatchers.Main) {
                    onError.invoke("クイズの取得に失敗しました")
                }
            }
        }
    }

    fun cleanup() {
        scope.cancel()
    }

    fun loadCategoriesAsync(
        chapterNumber: Int,
        quizDao: QuizDao,
        onSuccess: Function1<List<String>, Unit>,
        onError: Function1<String, Unit>
    ) {
        scope.launch {
            try {
                val quizzes = quizDao.getAllQuizzes()
                val categories = mutableListOf<String>()
                for (quiz in quizzes) {
                    if (quiz.chapter == chapterNumber.toString() && !categories.contains(quiz.category)) {
                        categories.add(quiz.category)
                    }
                }
                withContext(Dispatchers.Main) {
                    onSuccess.invoke(categories)
                }
            } catch (e: Exception) {
                e.printStackTrace()
                withContext(Dispatchers.Main) {
                    onError.invoke("カテゴリーの読み込みに失敗しました")
                }
            }
        }
    }

    fun getQuizCountForCategoryAsync(
        category: String,
        quizDao: QuizDao,
        onSuccess: Function1<Int, Unit>,
        onError: Function1<String, Unit>
    ) {
        scope.launch {
            try {
                val quizzes = quizDao.getAllQuizzes()
                val count = quizzes.count { quiz -> quiz.category == category }
                withContext(Dispatchers.Main) {
                    onSuccess.invoke(count)
                }
            } catch (e: Exception) {
                e.printStackTrace()
                withContext(Dispatchers.Main) {
                    onError.invoke("問題数の取得に失敗しました")
                }
            }
        }
    }

    /**
     * ContentfulからすべてのデータをFetchするメソッド
     * 進捗状況をレポートする機能付き
     */
    fun fetchAllEntriesAsync(
        contentType: String,
        onProgress: (Int, String) -> Unit,
        onSuccess: (List<CDAEntry>) -> Unit,
        onError: (String) -> Unit
    ) {
        requireNotNull(api) { "API instance is required for this operation" }
        scope.launch {
            try {
                withContext(Dispatchers.Main) {
                    onProgress(0, "Contentfulに接続中...")
                }
                
                // 一度に大量のデータを取得（最大1000件）
                val client = api.getClient() ?: throw IllegalStateException("Contentful Client is null")
                
                withContext(Dispatchers.Main) {
                    onProgress(20, "データをダウンロード中...")
                }
                
                // クエリを構築して実行
                val query = client.fetch(CDAEntry::class.java)
                    .withContentType(contentType)
                    .where("limit", "1000")  // limitをパラメータとして設定
                
                val response = query.all()
                val entries = response.items().filterIsInstance<CDAEntry>()
                
                withContext(Dispatchers.Main) {
                    onProgress(80, "ダウンロード完了: ${entries.size}件のデータ")
                    onSuccess(entries)
                }
            } catch (e: Exception) {
                e.printStackTrace()
                val errorMsg = handleError(e)
                Log.e("AsyncHelper", "Fetch all entries error: $errorMsg", e)
                withContext(Dispatchers.Main) {
                    onError(errorMsg)
                }
            }
        }
    }

}

================
File: src/main/java/com/example/contentful_javasilver/CategoryFragment.java
================
package com.example.contentful_javasilver;

import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.navigation.Navigation;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.contentful_javasilver.data.QuizDao;
import com.example.contentful_javasilver.data.QuizDatabase;
import com.example.contentful_javasilver.data.QuizEntity;
import com.example.contentful_javasilver.databinding.FragmentCategoryBinding;
import com.example.contentful_javasilver.databinding.ItemCategoryBinding;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;

import kotlin.Unit;

public class CategoryFragment extends Fragment {
    private static final String TAG = "CategoryFragment";
    private FragmentCategoryBinding binding;
    private CategoryAdapter categoryAdapter;
    private QuizDao quizDao;
    private DatabaseHelperCoroutines databaseHelper;
    private int chapterNumber;
    private String chapterTitle;
    private final Executor executor = Executors.newSingleThreadExecutor();

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        binding = FragmentCategoryBinding.inflate(inflater, container, false);
        return binding.getRoot();
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        // Bundleからデータを取得
        if (getArguments() != null) {
            chapterNumber = getArguments().getInt("chapterNumber", 1);
            chapterTitle = getArguments().getString("chapterTitle", "");
        }

        Log.d(TAG, "Chapter number: " + chapterNumber + ", title: " + chapterTitle);

        // データベースの初期化
        QuizDatabase db = QuizDatabase.getDatabase(requireContext());
        quizDao = db.quizDao();
        databaseHelper = new DatabaseHelperCoroutines();

        setupViews();
        setupRecyclerView();
        
        // データベース内のクイズ数を確認
        checkDatabaseStatus();
        
        // カテゴリをロード
        showLoading(true);
        loadCategories();
    }

    private void checkDatabaseStatus() {
        executor.execute(() -> {
            try {
                List<QuizEntity> allQuizzes = quizDao.getAllQuizzes();
                Log.d(TAG, "Total quizzes in database: " + allQuizzes.size());
                
                if (allQuizzes.isEmpty()) {
                    requireActivity().runOnUiThread(() -> {
                        Toast.makeText(requireContext(), "データベースにクイズがありません。データをダウンロードしてください。", Toast.LENGTH_LONG).show();
                    });
                    return;
                }
                
                // すべての問題のフィールドを詳細に表示
                Log.d(TAG, "=============== すべてのクイズデータ ===============");
                for (QuizEntity quiz : allQuizzes) {
                    Log.d(TAG, String.format("ID: %s, Chapter: '%s', Category: '%s', QuestionCategory: '%s'",
                        quiz.getQid(),
                        quiz.getChapter(),
                        quiz.getCategory(),
                        quiz.getQuestionCategory()
                    ));
                }
                Log.d(TAG, "=================================================");
                
                // チャプター別に問題数をカウント
                Map<String, Integer> chapterCounts = new HashMap<>();
                Map<String, Set<String>> chapterCategories = new HashMap<>();
                
                for (QuizEntity quiz : allQuizzes) {
                    String chapter = quiz.getChapter();
                    String category = quiz.getCategory();
                    
                    // チャプターカウント更新
                    chapterCounts.put(chapter, chapterCounts.getOrDefault(chapter, 0) + 1);
                    
                    // チャプターごとのカテゴリー追加
                    if (!chapterCategories.containsKey(chapter)) {
                        chapterCategories.put(chapter, new HashSet<>());
                    }
                    if (category != null) {
                        chapterCategories.get(chapter).add(category);
                    }
                }
                
                // 結果を表示
                Log.d(TAG, "=============== チャプター統計 ===============");
                for (Map.Entry<String, Integer> entry : chapterCounts.entrySet()) {
                    Log.d(TAG, String.format("Chapter: '%s' - %d quizzes, Categories: %s",
                        entry.getKey(),
                        entry.getValue(),
                        chapterCategories.get(entry.getKey())
                    ));
                }
                Log.d(TAG, "==============================================");
                
                // 現在選択中のチャプターに関する詳細情報
                Log.d(TAG, String.format("現在選択中のチャプター: %d", chapterNumber));
                
                // 現在のチャプターに一致する問題を確認
                List<QuizEntity> matchingQuizzes = new ArrayList<>();
                for (QuizEntity quiz : allQuizzes) {
                    String chapterStr = quiz.getChapter();
                    boolean matches = false;
                    
                    try {
                        // 様々な形式の章番号に対応
                        if (chapterStr != null) {
                            chapterStr = chapterStr.trim();
                            if (chapterStr.equals(String.valueOf(chapterNumber))) {
                                matches = true;
                            } else if (chapterStr.equals(chapterNumber + "章")) {
                                matches = true; 
                            } else if (chapterStr.matches("^\\d+$") && Integer.parseInt(chapterStr) == chapterNumber) {
                                matches = true;
                            } else if (chapterStr.contains("章")) {
                                int num = Integer.parseInt(chapterStr.replace("章", "").trim());
                                if (num == chapterNumber) matches = true;
                            }
                        }
                    } catch (Exception e) {
                        Log.e(TAG, "Error parsing chapter: " + chapterStr, e);
                    }
                    
                    if (matches) {
                        matchingQuizzes.add(quiz);
                    }
                }
                
                Log.d(TAG, String.format("チャプター %d と一致する問題数: %d", chapterNumber, matchingQuizzes.size()));
                if (!matchingQuizzes.isEmpty()) {
                    Set<String> categories = new HashSet<>();
                    for (QuizEntity quiz : matchingQuizzes) {
                        if (quiz.getCategory() != null) {
                            categories.add(quiz.getCategory());
                        }
                    }
                    Log.d(TAG, String.format("チャプター %d のカテゴリー: %s", chapterNumber, categories));
                    
                    // いくつかのサンプル問題を表示
                    int samplesToShow = Math.min(5, matchingQuizzes.size());
                    Log.d(TAG, String.format("チャプター %d のサンプル問題:", chapterNumber));
                    for (int i = 0; i < samplesToShow; i++) {
                        QuizEntity quiz = matchingQuizzes.get(i);
                        Log.d(TAG, String.format("  - ID: %s, Chapter: '%s', Category: '%s'",
                            quiz.getQid(), quiz.getChapter(), quiz.getCategory()));
                    }
                }
                
            } catch (Exception e) {
                Log.e(TAG, "Error checking database status", e);
            }
        });
    }

    private void setupViews() {
        binding.chapterTitleText.setText("第" + chapterNumber + "章");
        binding.chapterDescriptionText.setText(chapterTitle);

        binding.backButton.setOnClickListener(v -> {
            // ナビゲーションコントローラーでポップバックスタック（前の画面に戻る）
            Navigation.findNavController(v).popBackStack();
        });
    }

    private void setupRecyclerView() {
        binding.categoryRecyclerView.setLayoutManager(new LinearLayoutManager(requireContext()));
        binding.categoryRecyclerView.setHasFixedSize(true);
        categoryAdapter = new CategoryAdapter(new ArrayList<>());
        binding.categoryRecyclerView.setAdapter(categoryAdapter);
    }
    
    private void showLoading(boolean isLoading) {
        if (binding != null) {
            binding.progressBar.setVisibility(isLoading ? View.VISIBLE : View.GONE);
            binding.categoryRecyclerView.setVisibility(isLoading ? View.GONE : View.VISIBLE);
            binding.errorMessage.setVisibility(View.GONE);
        }
    }
    
    private void showError(String message) {
        if (binding != null) {
            binding.progressBar.setVisibility(View.GONE);
            binding.categoryRecyclerView.setVisibility(View.GONE);
            binding.errorMessage.setVisibility(View.VISIBLE);
            binding.errorMessage.setText(message);
        }
    }

    private void loadCategories() {
        Log.d(TAG, "Loading categories for chapter: " + chapterNumber);
        
        databaseHelper.loadCategoriesAsync(
            chapterNumber,
            quizDao,
            categories -> {
                Log.d(TAG, "Loaded " + categories.size() + " categories: " + categories);
                
                if (categories.isEmpty()) {
                    showError("カテゴリが見つかりませんでした。\n別の章を選択してください。");
                    return Unit.INSTANCE;
                }
                
                // すべてのカテゴリ処理を追跡するカウンター
                final int[] processedCount = {0};
                final List<CategoryItem> categoryItems = Collections.synchronizedList(new ArrayList<>());
                
                // カテゴリごとの問題数を取得
                for (String category : categories) {
                    Log.d(TAG, "Getting quiz count for category: " + category);
                    databaseHelper.getQuizCountForCategoryAsync(
                        category,
                        quizDao,
                        count -> {
                            Log.d(TAG, "Category " + category + " has " + count + " quizzes");
                            synchronized (categoryItems) {
                                categoryItems.add(new CategoryItem(category, count));
                                processedCount[0]++;
                                
                                Log.d(TAG, "Processed " + processedCount[0] + " of " + categories.size() + " categories");
                                
                                // すべてのカテゴリの問題数を取得したらUIを更新
                                if (processedCount[0] >= categories.size()) {
                                    if (isAdded()) {
                                        Log.d(TAG, "All categories processed. Updating UI with " + categoryItems.size() + " items");
                                        
                                        // メインスレッドでUIを更新
                                        requireActivity().runOnUiThread(() -> {
                                            try {
                                                // 念のため再チェック
                                                if (categoryAdapter != null && isAdded()) {
                                                    Log.d(TAG, "Updating adapter with categories: " + categoryItems);
                                                    categoryAdapter.updateCategories(new ArrayList<>(categoryItems));
                                                    binding.categoryRecyclerView.scrollToPosition(0);
                                                    showLoading(false);
                                                }
                                            } catch (Exception e) {
                                                Log.e(TAG, "Error updating UI", e);
                                            }
                                        });
                                    }
                                }
                            }
                            return Unit.INSTANCE;
                        },
                        error -> {
                            Log.e(TAG, "Error getting quiz count for category " + category + ": " + error);
                            synchronized (categoryItems) {
                                processedCount[0]++;
                                
                                // エラーが発生しても、すべてのカテゴリを処理したらUIを更新
                                if (processedCount[0] >= categories.size() && isAdded()) {
                                    requireActivity().runOnUiThread(() -> {
                                        if (categoryItems.isEmpty()) {
                                            showError("カテゴリの問題数取得中にエラーが発生しました。");
                                        } else {
                                            categoryAdapter.updateCategories(new ArrayList<>(categoryItems));
                                            showLoading(false);
                                        }
                                    });
                                }
                            }
                            return Unit.INSTANCE;
                        }
                    );
                }
                return Unit.INSTANCE;
            },
            error -> {
                Log.e(TAG, "Error loading categories: " + error);
                if (isAdded()) {
                    requireActivity().runOnUiThread(() -> {
                        showError("カテゴリのロードに失敗しました。\n" + error);
                    });
                }
                return Unit.INSTANCE;
            }
        );
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        binding = null;
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        if (databaseHelper != null) {
            databaseHelper.cleanup();
        }
    }

    // カテゴリー項目を表すデータクラス
    private static class CategoryItem {
        String title;
        int questionCount;

        CategoryItem(String title, int questionCount) {
            this.title = title;
            this.questionCount = questionCount;
        }

        String getTitle() {
            return title;
        }

        int getQuestionCount() {
            return questionCount;
        }
    }

    // RecyclerViewのアダプター
    private class CategoryAdapter extends RecyclerView.Adapter<CategoryAdapter.CategoryViewHolder> {
        private final List<CategoryItem> categories;

        CategoryAdapter(List<CategoryItem> categories) {
            this.categories = new ArrayList<>();
            if (categories != null) {
                this.categories.addAll(categories);
            }
        }

        public void updateCategories(List<CategoryItem> newCategories) {
            if (newCategories == null) {
                Log.e(TAG, "Attempted to update adapter with null categories");
                return;
            }
            
            Log.d(TAG, "Updating adapter with " + newCategories.size() + " categories");
            
            // カテゴリを名前でソート
            List<CategoryItem> sortedCategories = new ArrayList<>(newCategories);
            Collections.sort(sortedCategories, (cat1, cat2) -> {
                if (cat1 == null || cat2 == null || cat1.getTitle() == null || cat2.getTitle() == null) {
                    return 0;
                }
                return cat1.getTitle().compareTo(cat2.getTitle());
            });
            
            // データ更新
            this.categories.clear();
            this.categories.addAll(sortedCategories);
            
            // ログで確認
            for (CategoryItem item : this.categories) {
                Log.d(TAG, "Category in adapter: " + item.getTitle() + " (" + item.getQuestionCount() + " 問)");
            }
            
            // UI更新
            notifyDataSetChanged();
        }

        @NonNull
        @Override
        public CategoryViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
            ItemCategoryBinding itemBinding = ItemCategoryBinding.inflate(
                    LayoutInflater.from(parent.getContext()), parent, false);
            return new CategoryViewHolder(itemBinding);
        }

        @Override
        public void onBindViewHolder(@NonNull CategoryViewHolder holder, int position) {
            if (position < 0 || position >= categories.size()) {
                Log.e(TAG, "Invalid position: " + position + ", categories size: " + categories.size());
                return;
            }
            
            CategoryItem item = categories.get(position);
            if (item == null) {
                Log.e(TAG, "Null category item at position " + position);
                return;
            }
            
            holder.binding.categoryTitleText.setText(item.getTitle());
            holder.binding.questionCountText.setText(item.getQuestionCount() + "問");

            holder.itemView.setOnClickListener(v -> {
                Bundle args = new Bundle();
                args.putString("category", item.getTitle());
                
                Navigation.findNavController(v).navigate(
                    R.id.action_categoryFragment_to_questionCategoryFragment, 
                    args
                );
            });
        }

        @Override
        public int getItemCount() {
            return categories.size();
        }

        class CategoryViewHolder extends RecyclerView.ViewHolder {
            ItemCategoryBinding binding;

            CategoryViewHolder(ItemCategoryBinding binding) {
                super(binding.getRoot());
                this.binding = binding;
            }
        }
    }
}

================
File: src/main/java/com/example/contentful_javasilver/CategorySelectActivity.java
================
package com.example.contentful_javasilver;

import android.content.Intent;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.contentful_javasilver.data.QuizDao;
import com.example.contentful_javasilver.data.QuizDatabase;
import com.example.contentful_javasilver.databinding.ActivityCategorySelectBinding;
import com.example.contentful_javasilver.databinding.ItemCategoryBinding;

import java.util.ArrayList;
import java.util.List;

import kotlin.Unit;

public class CategorySelectActivity extends AppCompatActivity {
    private ActivityCategorySelectBinding binding;
    private CategoryAdapter categoryAdapter;
    private QuizDao quizDao;
    private DatabaseHelperCoroutines databaseHelper;
    private int chapterNumber;
    private String chapterTitle;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivityCategorySelectBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        // インテントからデータを取得
        chapterNumber = getIntent().getIntExtra("chapterNumber", 1);
        chapterTitle = getIntent().getStringExtra("chapterTitle");

        // データベースの初期化
        QuizDatabase db = QuizDatabase.getDatabase(this);
        quizDao = db.quizDao();
        databaseHelper = new DatabaseHelperCoroutines();

        setupViews();
        setupRecyclerView();
        loadCategories();
    }

    private void setupViews() {
        binding.chapterTitleText.setText("第" + chapterNumber + "章");
        binding.chapterDescriptionText.setText(chapterTitle);

        binding.backButton.setOnClickListener(v -> finish());
    }

    private void setupRecyclerView() {
        binding.categoryRecyclerView.setLayoutManager(new LinearLayoutManager(this));
        binding.categoryRecyclerView.setHasFixedSize(true);
        categoryAdapter = new CategoryAdapter(new ArrayList<>());
        binding.categoryRecyclerView.setAdapter(categoryAdapter);
    }

    private void loadCategories() {
        databaseHelper.loadCategoriesAsync(
            chapterNumber,
            quizDao,
            categories -> {
                List<CategoryItem> categoryItems = new ArrayList<>();
                for (String category : categories) {
                    databaseHelper.getQuizCountForCategoryAsync(
                        category,
                        quizDao,
                        count -> {
                            categoryItems.add(new CategoryItem(category, count));
                            if (categoryItems.size() == categories.size()) {
                                categoryAdapter.updateCategories(categoryItems);
                                binding.categoryRecyclerView.scrollToPosition(0);
                            }
                            return Unit.INSTANCE;
                        },
                        error -> {
                            Toast.makeText(CategorySelectActivity.this, error, Toast.LENGTH_SHORT).show();
                            return Unit.INSTANCE;
                        }
                    );
                }
                return Unit.INSTANCE;
            },
            error -> {
                Toast.makeText(CategorySelectActivity.this, error, Toast.LENGTH_SHORT).show();
                return Unit.INSTANCE;
            }
        );
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        databaseHelper.cleanup();
    }

    // カテゴリー項目を表すデータクラス
    private static class CategoryItem {
        String title;
        int questionCount;

        CategoryItem(String title, int questionCount) {
            this.title = title;
            this.questionCount = questionCount;
        }
    }

    // RecyclerViewのアダプター
    private class CategoryAdapter extends RecyclerView.Adapter<CategoryAdapter.CategoryViewHolder> {
        private List<CategoryItem> categories;

        CategoryAdapter(List<CategoryItem> categories) {
            this.categories = new ArrayList<>(categories);
        }

        public void updateCategories(List<CategoryItem> newCategories) {
            this.categories.clear();
            this.categories.addAll(newCategories);
            notifyDataSetChanged();
        }

        @NonNull
        @Override
        public CategoryViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
            ItemCategoryBinding itemBinding = ItemCategoryBinding.inflate(
                    LayoutInflater.from(parent.getContext()), parent, false);
            return new CategoryViewHolder(itemBinding);
        }

        @Override
        public void onBindViewHolder(@NonNull CategoryViewHolder holder, int position) {
            CategoryItem item = categories.get(position);
            holder.binding.categoryTitleText.setText(item.title);
            holder.binding.questionCountText.setText(item.questionCount + "問");

            holder.itemView.setOnClickListener(v -> {
                Intent intent = new Intent(CategorySelectActivity.this, QuestionCategorySelectActivity.class);
                intent.putExtra("category", item.title);
                startActivity(intent);
            });
        }

        @Override
        public int getItemCount() {
            return categories.size();
        }

        class CategoryViewHolder extends RecyclerView.ViewHolder {
            ItemCategoryBinding binding;

            CategoryViewHolder(ItemCategoryBinding binding) {
                super(binding.getRoot());
                this.binding = binding;
            }
        }
    }
}

================
File: src/main/java/com/example/contentful_javasilver/ChapterFragment.java
================
package com.example.contentful_javasilver;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.navigation.Navigation;

import com.example.contentful_javasilver.databinding.FragmentChapterBinding;
import com.google.android.material.card.MaterialCardView;

public class ChapterFragment extends Fragment {
    private FragmentChapterBinding binding;

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        binding = FragmentChapterBinding.inflate(inflater, container, false);
        return binding.getRoot();
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        setupClickListeners();
    }

    private void setupClickListeners() {
        // 戻るボタンのクリックリスナー
        binding.backButton.setOnClickListener(v -> {
            // ナビゲーションコントローラーでポップバックスタック（前の画面に戻る）
            Navigation.findNavController(v).popBackStack();
        });

        // 各章カードのクリックリスナー
        binding.chapter1Card.setOnClickListener(v -> 
            navigateToCategoryFragment(v, 1, "Java の概要と簡単なJavaプログラムの作成"));
        binding.chapter2Card.setOnClickListener(v -> 
            navigateToCategoryFragment(v, 2, "Javaの基本データ型と文字列の操作"));
        binding.chapter3Card.setOnClickListener(v -> 
            navigateToCategoryFragment(v, 3, "演算子と制御構造"));
        binding.chapter4Card.setOnClickListener(v -> 
            navigateToCategoryFragment(v, 4, "クラスの定義とインスタンスの使用"));
        binding.chapter5Card.setOnClickListener(v -> 
            navigateToCategoryFragment(v, 5, "継承とインタフェースの使用"));
        binding.chapter6Card.setOnClickListener(v -> 
            navigateToCategoryFragment(v, 6, "例外処理"));
    }

    private void navigateToCategoryFragment(View view, int chapterNumber, String chapterTitle) {
        // Bundleでデータを渡す
        Bundle args = new Bundle();
        args.putInt("chapterNumber", chapterNumber);
        args.putString("chapterTitle", chapterTitle);
        
        // CategoryFragmentに遷移
        Navigation.findNavController(view).navigate(R.id.action_chapterFragment_to_categoryFragment, args);
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        binding = null;
    }
}

================
File: src/main/java/com/example/contentful_javasilver/ChapterSelectActivity.java
================
package com.example.contentful_javasilver;

import android.content.Intent;
import android.os.Bundle;
import androidx.appcompat.app.AppCompatActivity;
import com.example.contentful_javasilver.databinding.ActivityChapterSelectBinding;

public class ChapterSelectActivity extends AppCompatActivity {
    private ActivityChapterSelectBinding binding;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivityChapterSelectBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        setupClickListeners();
    }

    private void setupClickListeners() {
        // 戻るボタンのクリックリスナー
        binding.backButton.setOnClickListener(v -> finish());

        // 各章カードのクリックリスナー
        binding.chapter1Card.setOnClickListener(v -> 
            startCategoryActivity(1, "Java の概要と簡単なJavaプログラムの作成"));
        binding.chapter2Card.setOnClickListener(v -> 
            startCategoryActivity(2, "Javaの基本データ型と文字列の操作"));
        binding.chapter3Card.setOnClickListener(v -> 
            startCategoryActivity(3, "演算子と制御構造"));
        binding.chapter4Card.setOnClickListener(v -> 
            startCategoryActivity(4, "クラスの定義とインスタンスの使用"));
        binding.chapter5Card.setOnClickListener(v -> 
            startCategoryActivity(5, "継承とインタフェースの使用"));
        binding.chapter6Card.setOnClickListener(v -> 
            startCategoryActivity(6, "例外処理"));
    }

    private void startCategoryActivity(int chapterNumber, String chapterTitle) {
        Intent intent = new Intent(this, CategorySelectActivity.class);
        intent.putExtra("chapterNumber", chapterNumber);
        intent.putExtra("chapterTitle", chapterTitle);
        startActivity(intent);
    }
}

================
File: src/main/java/com/example/contentful_javasilver/ContentfulGetApi.java
================
package com.example.contentful_javasilver;

import com.contentful.java.cda.CDAArray;
import com.contentful.java.cda.CDAClient;
import com.contentful.java.cda.CDAEntry;


public class ContentfulGetApi {
    private static final String ACCESS_TOKEN = BuildConfig.CONTENTFUL_ACCESS_TOKEN;
    private static final String SPACE_ID = BuildConfig.CONTENTFUL_SPACE_ID;
    private CDAClient client;
    // コンストラクタでスペースIDとアクセストークンを受け取る
    public ContentfulGetApi(String spaceId, String accessToken) {
        this.client = CDAClient.builder()
                .setSpace(spaceId)
                .setToken(accessToken)
                .build();
    }
    // 特定のコンテンツタイプの全エントリを取得
    public CDAArray fetchEntries(String contentType) {
        return client
                .fetch(CDAEntry.class)
                .withContentType(contentType)
                .limit(1000)
                .all();
    }
    // 特定のエントリを取得するメソッド
    public CDAEntry fetchEntryById(String entryId) {
        return client.fetch(CDAEntry.class).one(entryId);
    }
    
    // CDAClientインスタンスを取得するメソッド
    public CDAClient getClient() {
        return this.client;
    }
}

================
File: src/main/java/com/example/contentful_javasilver/data/DatabaseTransaction.kt
================
package com.example.contentful_javasilver.data

import androidx.room.withTransaction
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

/**
 * データベーストランザクションを安全に処理するユーティリティクラス
 */
object DatabaseTransaction {
    /**
     * トランザクション内で処理を実行し、自動的にリソースを閉じる
     * @param database データベースインスタンス
     * @param block 実行するトランザクション処理
     * @return トランザクション処理の結果
     */
    suspend fun <T> executeInTransaction(database: QuizDatabase, block: suspend (QuizDao) -> T): T {
        return withContext(Dispatchers.IO) {
            // Room 2.2以降ではwithTransactionを使うとサスペンド関数を直接呼び出せる
            database.withTransaction {
                block(database.quizDao())
            }
        }
    }

    /**
     * クエリを実行して安全にリソースを閉じる
     * @param database データベースインスタンス
     * @param block 実行するクエリ処理
     * @return クエリ処理の結果
     */
    suspend fun <T> executeQuery(database: QuizDatabase, block: suspend (QuizDao) -> T): T {
        return withContext(Dispatchers.IO) {
            block(database.quizDao())
        }
    }
}

================
File: src/main/java/com/example/contentful_javasilver/data/QuizDao.java
================
package com.example.contentful_javasilver.data;

import androidx.lifecycle.LiveData;
import androidx.room.Dao;
import androidx.room.Insert;
import androidx.room.OnConflictStrategy;
import androidx.room.Query;
import java.util.List;

@Dao
public interface QuizDao {
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    void insertAll(List<QuizEntity> quizzes);

    @Query("SELECT * FROM quizzes")
    List<QuizEntity> getAllQuizzes();

    @Query("SELECT * FROM quizzes WHERE rowid IN (SELECT rowid FROM quizzes ORDER BY RANDOM() LIMIT :count)")
    LiveData<List<QuizEntity>> getRandomQuizzes(int count);

    @Query("SELECT * FROM quizzes WHERE rowid IN (SELECT rowid FROM quizzes ORDER BY RANDOM() LIMIT :count)")
    List<QuizEntity> getRandomQuizzesSync(int count);

    @Query("SELECT COUNT(*) FROM quizzes")
    LiveData<Integer> getQuizCount();

    @Query("SELECT COUNT(*) FROM quizzes")
    int getQuizCountSync();

    @Query("SELECT * FROM quizzes WHERE category = :category ORDER BY qid ASC")
    LiveData<List<QuizEntity>> getQuizzesByCategory(String category);

    @Query("SELECT * FROM quizzes WHERE qid = :qid")
    LiveData<List<QuizEntity>> getQuizzesByQidLive(String qid);

    @Query("SELECT * FROM quizzes WHERE chapter = :chapter AND category = :category")
    LiveData<List<QuizEntity>> getQuizzesByChapterAndCategory(String chapter, String category);

    @Query("SELECT * FROM quizzes WHERE qid = :qid")
    List<QuizEntity> getQuizzesByQid(String qid);
}

================
File: src/main/java/com/example/contentful_javasilver/data/QuizDatabase.java
================
package com.example.contentful_javasilver.data;

import android.content.Context;

import androidx.room.Database;
import androidx.room.Room;
import androidx.room.RoomDatabase;
import androidx.room.TypeConverters;

/**
 * QuizデータベースのRoomデータベースクラス
 */
@Database(entities = {QuizEntity.class}, version = 11, exportSchema = false)
@TypeConverters({QuizEntity.Converters.class})
public abstract class QuizDatabase extends RoomDatabase {
    private static volatile QuizDatabase INSTANCE;

    /**
     * QuizDaoを取得するための抽象メソッド
     * @return QuizDaoインスタンス
     */
    public abstract QuizDao quizDao();

    /**
     * データベースインスタンスを取得（シングルトンパターン）
     * @param context アプリケーションコンテキスト
     * @return QuizDatabaseインスタンス
     */
    public static QuizDatabase getDatabase(Context context) {
        if (INSTANCE == null) {
            synchronized (QuizDatabase.class) {
                if (INSTANCE == null) {
                    // データベースインスタンスを作成
                    INSTANCE = Room.databaseBuilder(
                            context.getApplicationContext(),
                            QuizDatabase.class,
                            "quiz_database")
                            // スキーマバージョンが変更されたときに既存のデータベースを削除して再作成
                            .fallbackToDestructiveMigration()
                            .build();
                }
            }
        }
        return INSTANCE;
    }
}

================
File: src/main/java/com/example/contentful_javasilver/data/QuizEntity.java
================
package com.example.contentful_javasilver.data;

import androidx.room.Entity;
import androidx.room.PrimaryKey;
import androidx.room.TypeConverters;
import androidx.annotation.NonNull;
import java.util.List;
import androidx.room.Index;

@Entity(tableName = "quizzes", 
    indices = {
        @Index(value = {"category"}),
        @Index(value = {"chapter"}),
        @Index(value = {"questionCategory"})
    }
)
public class QuizEntity {
    @PrimaryKey
    @NonNull
    private String qid;
    private String chapter;
    private String category;
    private String questionCategory;
    private String difficulty;
    private String code;
    private String questionText;

    @TypeConverters(Converters.class)
    private List<String> choices;

    @TypeConverters(Converters.class)
    private List<Integer> answer;

    private String explanation;
    private long updatedAt;

    public QuizEntity(String qid, String chapter, String category, String questionCategory,
                      String difficulty, String code, String questionText,
                      List<String> choices, List<Integer> answer, String explanation) {
        this.qid = qid;
        this.chapter = chapter;
        this.category = category;
        this.questionCategory = questionCategory;
        this.difficulty = difficulty;
        this.code = code;
        this.questionText = questionText;
        this.choices = choices;
        this.answer = answer;
        this.explanation = explanation;
        this.updatedAt = System.currentTimeMillis();
    }

    // Getters and Setters
    @NonNull
    public String getQid() { return qid; }
    public void setQid(@NonNull String qid) { this.qid = qid; }
    public String getChapter() { return chapter; }
    public void setChapter(String chapter) { this.chapter = chapter; }
    public String getCategory() { return category; }
    public void setCategory(String category) { this.category = category; }
    public String getQuestionCategory() { return questionCategory; }
    public void setQuestionCategory(String questionCategory) { this.questionCategory = questionCategory; }
    public String getDifficulty() { return difficulty; }
    public void setDifficulty(String difficulty) { this.difficulty = difficulty; }
    public String getCode() { return code; }
    public void setCode(String code) { this.code = code; }
    public String getQuestionText() { return questionText; }
    public void setQuestionText(String questionText) { this.questionText = questionText; }
    public List<String> getChoices() { return choices; }
    public void setChoices(List<String> choices) { this.choices = choices; }
    public List<Integer> getAnswer() { return answer; }
    public void setAnswer(List<Integer> answer) { this.answer = answer; }
    public String getExplanation() { return explanation; }
    public void setExplanation(String explanation) { this.explanation = explanation; }
    public long getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(long updatedAt) { this.updatedAt = updatedAt; }

    // Type Converters for Room
    public static class Converters {
        @androidx.room.TypeConverter
        public static String fromStringList(List<String> value) {
            return value == null ? null : String.join(",", value);
        }

        @androidx.room.TypeConverter
        public static List<String> toStringList(String value) {
            return value == null ? null : java.util.Arrays.asList(value.split(","));
        }

        @androidx.room.TypeConverter
        public static String fromIntegerList(List<Integer> value) {
            if (value == null) return null;
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < value.size(); i++) {
                sb.append(value.get(i));
                if (i < value.size() - 1) sb.append(",");
            }
            return sb.toString();
        }

        @androidx.room.TypeConverter
        public static List<Integer> toIntegerList(String value) {
            if (value == null) return null;
            List<Integer> list = new java.util.ArrayList<>();
            String[] parts = value.split(",");
            for (String part : parts) {
                list.add(Integer.parseInt(part.trim()));
            }
            return list;
        }
    }

    @Override
    public String toString() {
        return "QuizEntity{" +
                "qid='" + qid + '\'' +
                ", chapter='" + chapter + '\'' +
                ", category='" + category + '\'' +
                ", questionCategory='" + questionCategory + '\'' +
                '}';
    }
}

================
File: src/main/java/com/example/contentful_javasilver/DatabaseHelperCoroutines.kt
================
package com.example.contentful_javasilver

import android.util.Log
import kotlinx.coroutines.*
import com.example.contentful_javasilver.data.QuizDao
import kotlin.Unit

class DatabaseHelperCoroutines {
    private val scope = CoroutineScope(Dispatchers.IO + SupervisorJob())
    private val TAG = "DatabaseHelper"

    fun loadCategoriesAsync(
        chapterNumber: Int,
        quizDao: QuizDao,
        onSuccess: (List<String>) -> Unit,
        onError: (String) -> Unit
    ) {
        scope.launch {
            try {
                Log.d(TAG, "Loading categories for chapter: $chapterNumber")
                val quizzes = quizDao.getAllQuizzes()
                Log.d(TAG, "Total quizzes in database: ${quizzes.size}")
                
                // まずはデータベース内のすべての章番号形式を確認
                val chapterFormats = quizzes.mapNotNull { it.chapter }.distinct()
                Log.d(TAG, "Chapter formats in database: $chapterFormats")
                
                // この章に該当する問題を特定
                val matchingQuizzes = quizzes.filter { quiz ->
                    // null/空チェック
                    if (quiz.chapter.isNullOrBlank() || quiz.category.isNullOrBlank()) {
                        Log.d(TAG, "Skipping quiz with null/empty chapter or category: qid=${quiz.qid}")
                        return@filter false
                    }
                    
                    // 章番号のパターンマッチング
                    val isMatchingChapter = when {
                        // 完全一致: "1", "2", etc.
                        quiz.chapter == chapterNumber.toString() -> true
                        
                        // "X章" パターン: "1章", "2章", etc.
                        quiz.chapter == "${chapterNumber}章" -> true
                        
                        // 数値のみを抽出して比較
                        else -> {
                            val chapterNum = extractNumberFromString(quiz.chapter)
                            chapterNum == chapterNumber
                        }
                    }
                    
                    if (isMatchingChapter) {
                        Log.d(TAG, "Found matching quiz: qid=${quiz.qid}, chapter=${quiz.chapter}, category=${quiz.category}")
                    }
                    
                    isMatchingChapter
                }
                
                Log.d(TAG, "Found ${matchingQuizzes.size} quizzes for chapter $chapterNumber")
                
                // カテゴリの抽出（非nullのみ）
                val categories = matchingQuizzes
                    .mapNotNull { it.category }
                    .filter { it.isNotBlank() }
                    .distinct()
                    .sorted()
                
                Log.d(TAG, "Extracted ${categories.size} distinct categories for chapter $chapterNumber: $categories")
                
                withContext(Dispatchers.Main) {
                    if (categories.isEmpty()) {
                        Log.w(TAG, "No categories found for chapter $chapterNumber")
                    }
                    onSuccess(categories)
                }
            } catch (e: Exception) {
                Log.e(TAG, "Error loading categories", e)
                withContext(Dispatchers.Main) {
                    onError("カテゴリーの読み込みに失敗しました: ${e.message}")
                }
            }
        }
    }

    /**
     * 文字列から数値を抽出するヘルパーメソッド
     */
    private fun extractNumberFromString(str: String?): Int {
        if (str.isNullOrBlank()) return -1
        
        return try {
            // 1. 数字のみの場合
            if (str.matches(Regex("^\\d+$"))) {
                return str.toInt()
            }
            
            // 2. "X章" パターンの場合
            if (str.contains("章")) {
                val number = str.replace("章", "").trim()
                if (number.matches(Regex("^\\d+$"))) {
                    return number.toInt()
                }
            }
            
            // 3. その他のケース: 数字以外の文字を除去
            val numberOnly = str.replace(Regex("[^0-9]"), "")
            if (numberOnly.isNotEmpty()) {
                numberOnly.toInt()
            } else {
                -1
            }
        } catch (e: Exception) {
            Log.e(TAG, "Error extracting number from $str", e)
            -1
        }
    }

    fun getQuizCountForCategoryAsync(
        category: String,
        quizDao: QuizDao,
        onSuccess: (Int) -> Unit,
        onError: (String) -> Unit
    ) {
        scope.launch {
            try {
                val quizzes = quizDao.getAllQuizzes()
                val count = quizzes.count { quiz -> quiz.category == category }
                withContext(Dispatchers.Main) {
                    onSuccess(count)
                }
            } catch (e: Exception) {
                e.printStackTrace()
                withContext(Dispatchers.Main) {
                    onError("問題数の取得に失敗しました")
                }
            }
        }
    }

    fun loadQuestionCategoriesAsync(
        category: String,
        quizDao: QuizDao,
        onSuccess: (List<QuestionCategoryItem>) -> Unit,
        onError: (String) -> Unit
    ) {
        scope.launch {
            try {
                val quizzes = quizDao.getAllQuizzes()
                val questionCategories = quizzes
                    .filter { it.category == category }
                    .map { QuestionCategoryItem(it.qid, it.questionCategory) }
                    .distinctBy { it.questionCategory }
                    .sortedBy { it.qid }

                withContext(Dispatchers.Main) {
                    onSuccess(questionCategories)
                }
            } catch (e: Exception) {
                withContext(Dispatchers.Main) {
                    onError("問題カテゴリーの読み込みに失敗しました")
                }
            }
        }
    }

    data class QuestionCategoryItem(
        val qid: String,
        val questionCategory: String
    )

    fun cleanup() {
        scope.cancel()
    }
}

================
File: src/main/java/com/example/contentful_javasilver/HomeActivity.java
================
package com.example.contentful_javasilver;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import com.google.android.material.button.MaterialButton;
import androidx.appcompat.app.AppCompatActivity;

/**
 * サブアクティビティクラス
 * - MainActivityから遷移してくる画面
 * - ホーム画面のレイアウトを表示
 */
public class HomeActivity extends AppCompatActivity {

    /**
     * アクティビティの作成時に呼ばれるライフサイクルメソッド
     * @param savedInstanceState 以前の状態を保存したBundle。アクティビティが再作成される場合に使用
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        // 親クラスのonCreateメソッドを呼び出し
        super.onCreate(savedInstanceState);
        
        // activity_home.xmlをこのアクティビティのレイアウトとして設定
        setContentView(R.layout.activity_home);

        // ランダム出題ボタンのクリックリスナー
        final MaterialButton randomButton = findViewById(R.id.randomButton);
        randomButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                Intent intent = new Intent(HomeActivity.this, QuizActivity.class);
                startActivity(intent);
            }
        });

        // 分野別に出題ボタンのクリックリスナー
        final MaterialButton categoryButton = findViewById(R.id.categoryButton);
        categoryButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                Intent intent = new Intent(HomeActivity.this, ChapterSelectActivity.class);
                startActivity(intent);
            }
        });

        // 必要に応じて、MainActivityから渡されたデータを取得
        // Intent intent = getIntent();
        // String data = intent.getStringExtra("key");
    }

    /**
     * アクティビティが開始されるときに呼ばれるライフサイクルメソッド
     * - ユーザーに見えるようになる直前に呼ばれる
     */
    @Override
    protected void onStart() {
        super.onStart();
        // 画面表示前の初期化処理をここに記述
    }

    /**
     * アクティビティが再開されるときに呼ばれるライフサイクルメソッド
     * - ユーザーとの対話を開始する直前に呼ばれる
     */
    @Override
    protected void onResume() {
        super.onResume();
        // アクティビティがフォアグラウンドに来たときの処理
    }

    /**
     * アクティビティが一時停止するときに呼ばれるライフサイクルメソッド
     * - 別の画面が前面に出たときなどに呼ばれる
     */
    @Override
    protected void onPause() {
        super.onPause();
        // バックグラウンドに移行する際のデータ保存などの処理
    }

    /**
     * アクティビティが停止するときに呼ばれるライフサイクルメソッド
     * - 画面が完全に見えなくなったときに呼ばれる
     */
    @Override
    protected void onStop() {
        super.onStop();
        // アクティビティが非表示になったときの処理
    }

    /**
     * アクティビティが破棄されるときに呼ばれるライフサイクルメソッド
     * - アクティビティが完全に終了するときに呼ばれる
     */
    @Override
    protected void onDestroy() {
        super.onDestroy();
        // リソースの解放など、終了時の処理
    }

    /**
     * 戻るボタンが押されたときの処理をカスタマイズする場合はこのメソッドをオーバーライド
     */
    @Override
    public void onBackPressed() {
        // 必要に応じて戻るボタンの動作をカスタマイズ
        super.onBackPressed();
    }
}

================
File: src/main/java/com/example/contentful_javasilver/HomeFragment.java
================
package com.example.contentful_javasilver;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.navigation.Navigation;
import com.example.contentful_javasilver.databinding.FragmentHomeBinding;

/**
 * ホーム画面のフラグメント
 * - メインアクティビティからナビゲーションされる画面
 * - ランダム問題とチャプター選択への選択肢を提供
 */
public class HomeFragment extends Fragment {

    private FragmentHomeBinding binding;

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        binding = FragmentHomeBinding.inflate(inflater, container, false);
        return binding.getRoot();
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        // ランダム出題ボタンのクリックリスナー
        binding.randomButton.setOnClickListener(v -> {
            // QuizFragmentへナビゲーション
            Navigation.findNavController(v).navigate(R.id.action_homeFragment_to_quizFragment);
        });

        // 分野別に出題ボタンのクリックリスナー
        binding.categoryButton.setOnClickListener(v -> {
            // ChapterFragmentへナビゲーション
            Navigation.findNavController(v).navigate(R.id.action_homeFragment_to_chapterFragment);
        });
        
        // 問題一覧ボタンのクリックリスナー
        binding.allQuestionsButton.setOnClickListener(v -> {
            // QuizFragmentへナビゲーション（すべての問題）
            Bundle bundle = new Bundle();
            bundle.putString("qid", "all"); // すべての問題を表示するためのフラグ
            Navigation.findNavController(v).navigate(R.id.action_homeFragment_to_quizFragment, bundle);
        });
        
        // 設定ボタンのクリックリスナー
        binding.settingsButton.setOnClickListener(v -> {
            Navigation.findNavController(v).navigate(R.id.settingsFragment);
        });
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        binding = null;
    }
}

================
File: src/main/java/com/example/contentful_javasilver/LoadingActivity.java
================
package com.example.contentful_javasilver;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import android.view.animation.AlphaAnimation;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;
import androidx.lifecycle.Observer;

import com.contentful.java.cda.CDAEntry;
import com.example.contentful_javasilver.data.QuizDatabase;
import com.example.contentful_javasilver.data.QuizEntity;

import java.util.ArrayList;
import java.util.List;

import kotlin.Unit;

public class LoadingActivity extends AppCompatActivity {
    private static final String TAG = "LoadingActivity";
    private static final String ACCESS_TOKEN = BuildConfig.CONTENTFUL_ACCESS_TOKEN;
    private static final String SPACE_ID = BuildConfig.CONTENTFUL_SPACE_ID;
    private QuizDatabase database;
    private TextView loadingText;
    private int loadedCount = 0;
    private int totalEntries = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_loading);

        // Contentfulの認証情報をチェック
        if (SPACE_ID == null || SPACE_ID.isEmpty() || ACCESS_TOKEN == null || ACCESS_TOKEN.isEmpty()) {
            Log.e(TAG, "Contentful credentials are not properly configured");
            Log.e(TAG, "SPACE_ID: " + (SPACE_ID == null ? "null" : SPACE_ID));
            Log.e(TAG, "ACCESS_TOKEN: " + (ACCESS_TOKEN == null ? "null" : ACCESS_TOKEN));
            loadingText = findViewById(R.id.loadingText);
            loadingText.setText("Contentfulの設定が正しくありません。\nlocal.propertiesを確認してください。");
            return;
        }

        database = QuizDatabase.getDatabase(this);
        loadingText = findViewById(R.id.loadingText);
        
        // ローディングテキストのフェードインアニメーション
        AlphaAnimation fadeIn = new AlphaAnimation(0.0f, 1.0f);
        fadeIn.setDuration(1000);
        fadeIn.setFillAfter(true);
        loadingText.startAnimation(fadeIn);

        // データベースにデータがあるかチェック
        database.quizDao().getQuizCount().observe(this, count -> {
            Log.d(TAG, String.format("Current database entries: %d", count));
            if (count == 0) {
                // データがない場合はContentfulから取得
                fetchFromContentful();
            } else {
                // データがある場合は直接ホーム画面に遷移
                Log.d(TAG, "Using existing database data");
                new Handler(Looper.getMainLooper()).post(() -> {
                    Intent intent = new Intent(LoadingActivity.this, HomeActivity.class);
                    startActivity(intent);
                    overridePendingTransition(0, 0);
                    finish();
                });
            }
        });
    }

    private void fetchFromContentful() {
        loadingText.setText("データを読み込み中...\n0/0");

        // Contentfulからデータを取得して保存
        ContentfulGetApi contentfulgetapi = new ContentfulGetApi(SPACE_ID, ACCESS_TOKEN);
        AsyncHelperCoroutines asyncHelper = new AsyncHelperCoroutines(contentfulgetapi);

        asyncHelper.fetchEntriesAsync("javaSilverQ", 
            entries -> {
                if (entries == null || entries.isEmpty()) {
                    Log.e(TAG, "No entries found");
                    Log.e(TAG, "Contentful API Response: entries is " + (entries == null ? "null" : "empty"));
                    runOnUiThread(() -> {
                        loadingText.setText("データが見つかりませんでした。\nアプリを再起動してください。");
                    });
                    return Unit.INSTANCE;
                }

                totalEntries = entries.size();
                Log.d(TAG, String.format("Total entries from Contentful: %d", totalEntries));
                List<QuizEntity> quizEntities = new ArrayList<>();
                
                for (CDAEntry entry : entries) {
                    try {
                        String qid = entry.getField("qid");
                        String chapter = entry.getField("chapter");
                        String category = entry.getField("category");
                        String questionCategory = entry.getField("questionCategory");
                        String difficulty = entry.getField("difficulty");
                        String code = entry.getField("code");
                        String questionText = entry.getField("questionText");
                        List<String> choices = entry.getField("choices");
                        List<Double> rawAnswers = entry.getField("answer");
                        String explanation = entry.getField("explanation");

                        // Double型のanswerをInteger型に変換
                        List<Integer> answers = new ArrayList<>();
                        if (rawAnswers != null) {
                            for (Double answer : rawAnswers) {
                                answers.add(answer.intValue());
                            }
                        }

                        if (qid != null && code != null) {
                            quizEntities.add(new QuizEntity(
                                qid, chapter, category, questionCategory,
                                difficulty, code, questionText,
                                choices, answers, explanation
                            ));
                            loadedCount++;
                            updateLoadingText();
                        }
                    } catch (Exception e) {
                        Log.e(TAG, "Error processing entry: " + entry.id(), e);
                    }
                }

                Log.d(TAG, String.format("Successfully processed %d entries", loadedCount));
                Log.d(TAG, String.format("Success rate: %.2f%%", (loadedCount * 100.0 / totalEntries)));

                // データベースに保存
                new Thread(() -> {
                    try {
                        database.quizDao().insertAll(quizEntities);
                        Log.d(TAG, "Successfully saved entries to database");
                        
                        // メインスレッドでホーム画面に遷移
                        new Handler(Looper.getMainLooper()).post(() -> {
                            Intent intent = new Intent(LoadingActivity.this, HomeActivity.class);
                            startActivity(intent);
                            overridePendingTransition(0, 0);
                            finish();
                        });
                    } catch (Exception e) {
                        Log.e(TAG, "Error saving to database", e);
                        runOnUiThread(() -> {
                            loadingText.setText("データの保存に失敗しました。\nアプリを再起動してください。");
                        });
                    }
                }).start();

                return Unit.INSTANCE;
            },
            errorMessage -> {
                Log.e(TAG, "Error fetching entries: " + errorMessage);
                runOnUiThread(() -> {
                    loadingText.setText("データの読み込みに失敗しました。\nアプリを再起動してください。");
                });
                return Unit.INSTANCE;
            }
        );
    }

    private void updateLoadingText() {
        runOnUiThread(() -> {
            loadingText.setText(String.format("データを読み込み中...\n%d/%d", loadedCount, totalEntries));
        });
    }
}

================
File: src/main/java/com/example/contentful_javasilver/LoadingFragment.java
================
package com.example.contentful_javasilver;

import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.navigation.Navigation;

import com.contentful.java.cda.CDAEntry;
import com.example.contentful_javasilver.data.QuizDatabase;
import com.example.contentful_javasilver.data.QuizEntity;
import com.example.contentful_javasilver.utils.SecurePreferences;

import java.util.ArrayList;
import java.util.List;

import kotlin.Unit;

public class LoadingFragment extends Fragment {

    private static final String TAG = "LoadingFragment";
    private ProgressBar progressBar;
    private TextView statusText;
    private final Handler handler = new Handler(Looper.getMainLooper());
    
    private AsyncHelperCoroutines asyncHelper;
    private QuizDatabase database;

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_loading, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        progressBar = view.findViewById(R.id.loadingProgressBar);
        statusText = view.findViewById(R.id.loadingStatusText);

        // データベースとAPIヘルパーの初期化
        database = QuizDatabase.getDatabase(requireContext());
        
        // APIキーの取得
        String apiKey = SecurePreferences.getContentfulApiKey(requireContext());
        String spaceId = SecurePreferences.getContentfulSpaceId(requireContext());
        
        // API初期化
        ContentfulGetApi contentfulApi = new ContentfulGetApi(spaceId, apiKey);
        asyncHelper = new AsyncHelperCoroutines(contentfulApi);

        // 実際のデータロードを開始
        loadData();
    }

    private void loadData() {
        // まずはデータベース内の既存データを確認
        new Thread(() -> {
            try {
                int currentCount = database.quizDao().getQuizCountSync();
                
                requireActivity().runOnUiThread(() -> {
                    if (currentCount > 0) {
                        Log.d(TAG, "既にデータが存在します: " + currentCount + "件");
                        updateProgressAndStatus(50, "既存データを確認中... " + currentCount + "件のクイズが見つかりました");
                        
                        // 既存データがある場合は、更新または追加のみを行う
                        checkForUpdates();
                    } else {
                        Log.d(TAG, "データベースが空です。全データをダウンロードします");
                        updateProgressAndStatus(10, "データベースが空です。全データをダウンロードします");
                        
                        // 初回ダウンロード
                        downloadAllData();
                    }
                });
            } catch (Exception e) {
                Log.e(TAG, "データベース確認中にエラーが発生しました", e);
                requireActivity().runOnUiThread(() -> {
                    updateProgressAndStatus(0, "エラー: データベースの確認に失敗しました");
                    showError("データベースエラー: " + e.getMessage());
                });
            }
        }).start();
    }
    
    private void checkForUpdates() {
        // 簡易版: データ更新のチェックは今回は省略し、ホーム画面へ遷移
        updateProgressAndStatus(100, "準備完了！");
        
        // ホーム画面へ遷移
        handler.postDelayed(() -> {
            if (isAdded()) {
                navigateToHome();
            }
        }, 1000);
    }
    
    private void downloadAllData() {
        asyncHelper.fetchAllEntriesAsync(
            "javaSilverQ",
            (progress, status) -> {
                updateProgressAndStatus(progress, status);
                return kotlin.Unit.INSTANCE;
            },
            entries -> {
                Log.d(TAG, entries.size() + "件のデータをダウンロードしました");
                updateProgressAndStatus(70, "データベースに保存中... " + entries.size() + "件");
                
                // エントリをQuizEntityに変換
                List<QuizEntity> entities = convertToQuizEntities(entries);
                
                // データベースに保存
                saveToDatabase(entities);
                
                return Unit.INSTANCE;
            },
            error -> {
                Log.e(TAG, "データのダウンロードに失敗しました: " + error);
                updateProgressAndStatus(0, "エラー: データのダウンロードに失敗しました");
                showError(error);
                return Unit.INSTANCE;
            }
        );
    }
    
    @SuppressWarnings("unchecked")
    private List<QuizEntity> convertToQuizEntities(List<? extends CDAEntry> entries) {
        List<QuizEntity> entities = new ArrayList<>();
        
        for (CDAEntry entry : entries) {
            try {
                String qid = getFieldAsString(entry, "qid");
                String chapter = getFieldAsString(entry, "chapter");
                String category = getFieldAsString(entry, "category");
                
                // questionCategoryフィールドは大文字小文字に注意
                String questionCategory;
                try {
                    questionCategory = getFieldAsString(entry, "questionCategory");
                    if (questionCategory.isEmpty()) {
                        questionCategory = getFieldAsString(entry, "questioncategory");
                    }
                } catch (Exception e) {
                    try {
                        questionCategory = getFieldAsString(entry, "questioncategory");
                    } catch (Exception ex) {
                        questionCategory = "";
                    }
                }
                
                String difficulty = getFieldAsString(entry, "difficulty");
                String code = getFieldAsString(entry, "code");
                String questionText = getFieldAsString(entry, "questionText");
                
                // choicesとanswerの取得 - 型を明示的に指定
                List<String> choices = (List<String>) entry.getField("choices");
                
                // Double型のanswerをInteger型に変換 - 型を明示的に指定
                List<Double> rawAnswers = (List<Double>) entry.getField("answer");
                List<Integer> intAnswers = new ArrayList<>();
                for (Double answer : rawAnswers) {
                    intAnswers.add(answer.intValue());
                }
                
                String explanation = getFieldAsString(entry, "explanation");
                
                QuizEntity entity = new QuizEntity(
                    qid,
                    chapter,
                    category,
                    questionCategory,
                    difficulty,
                    code,
                    questionText,
                    choices,
                    intAnswers,
                    explanation
                );
                
                entities.add(entity);
            } catch (Exception e) {
                Log.e(TAG, "エントリの変換に失敗しました: " + entry.id(), e);
                // 1つのエントリの変換に失敗しても続行
            }
        }
        
        return entities;
    }
    
    private String getFieldAsString(CDAEntry entry, String fieldName) {
        try {
            Object value = entry.getField(fieldName);
            return value != null ? value.toString() : "";
        } catch (Exception e) {
            return "";
        }
    }
    
    private void saveToDatabase(List<QuizEntity> entities) {
        if (entities.isEmpty()) {
            updateProgressAndStatus(0, "エラー: 保存するデータがありません");
            showError("変換されたデータがありません");
            return;
        }
        
        new Thread(() -> {
            try {
                // データベースに保存
                database.quizDao().insertAll(entities);
                
                // UIスレッドで完了処理
                requireActivity().runOnUiThread(() -> {
                    updateProgressAndStatus(100, "完了！" + entities.size() + "件のクイズを保存しました");
                    
                    // ホーム画面へ遷移
                    handler.postDelayed(this::navigateToHome, 1500);
                });
            } catch (Exception e) {
                Log.e(TAG, "データベースへの保存に失敗しました", e);
                requireActivity().runOnUiThread(() -> {
                    updateProgressAndStatus(0, "エラー: データベースへの保存に失敗しました");
                    showError("データベースエラー: " + e.getMessage());
                });
            }
        }).start();
    }

    private void updateProgressAndStatus(int progress, String status) {
        if (isAdded()) {
            progressBar.setProgress(progress);
            updateStatus(status);
        }
    }
    
    private void updateStatus(String status) {
        if (statusText != null) {
            statusText.setText(status);
        }
    }
    
    private void showError(String message) {
        if (isAdded()) {
            Toast.makeText(requireContext(), message, Toast.LENGTH_LONG).show();
        }
    }
    
    private void navigateToHome() {
        if (isAdded()) {
            try {
                Navigation.findNavController(requireView()).navigate(R.id.action_loading_to_home);
            } catch (Exception e) {
                Log.e(TAG, "ホーム画面への遷移に失敗しました", e);
            }
        }
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        handler.removeCallbacksAndMessages(null);
        
        // AsyncHelperのリソース解放
        if (asyncHelper != null) {
            asyncHelper.cleanup();
        }
    }
}

================
File: src/main/java/com/example/contentful_javasilver/MainActivity.java
================
package com.example.contentful_javasilver;

import android.os.Bundle;
import android.util.Log;
import android.view.View;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.navigation.NavController;
import androidx.navigation.Navigation;
import androidx.navigation.fragment.NavHostFragment;
import androidx.navigation.ui.NavigationUI;

import com.example.contentful_javasilver.data.QuizDao;
import com.example.contentful_javasilver.data.QuizDatabase;
import com.example.contentful_javasilver.data.QuizEntity;
import com.example.contentful_javasilver.databinding.ActivityMainBinding;
import com.example.contentful_javasilver.utils.SecurePreferences;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class MainActivity extends AppCompatActivity {
    private ActivityMainBinding binding;
    private NavController navController;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        NavHostFragment navHostFragment = (NavHostFragment) getSupportFragmentManager()
                .findFragmentById(R.id.nav_host_fragment);
        navController = navHostFragment.getNavController();

        // ボトムナビゲーションの表示制御
        navController.addOnDestinationChangedListener((controller, destination, arguments) -> {
            int destId = destination.getId();
            if (destId == R.id.startFragment || destId == R.id.loadingFragment) {
                binding.bottomNavigation.setVisibility(View.GONE);
            } else {
                binding.bottomNavigation.setVisibility(View.VISIBLE);
            }
        });

        NavigationUI.setupWithNavController(binding.bottomNavigation, navController);

        // BuildConfigからキーを取得し、安全に保存
        String apiKey = BuildConfig.CONTENTFUL_ACCESS_TOKEN;
        String spaceId = BuildConfig.CONTENTFUL_SPACE_ID;
        SecurePreferences.initializeSecureKeys(getApplicationContext(), apiKey, spaceId);

        // デバッグ用のサンプルデータをデータベースに追加
        if (BuildConfig.DEBUG) {
            addSampleDataToDatabase();
        }
    }

    /**
     * デバッグ用のサンプルデータをデータベースに追加
     */
    private void addSampleDataToDatabase() {
        new Thread(() -> {
            try {
                QuizDatabase db = QuizDatabase.getDatabase(getApplicationContext());
                QuizDao quizDao = db.quizDao();
                
                // 既存のデータ数を確認
                List<QuizEntity> existingQuizzes = quizDao.getAllQuizzes();
                if (existingQuizzes.size() > 0) {
                    Log.d("MainActivity", "データベースには既に " + existingQuizzes.size() + " 件のデータが存在します。サンプルは追加しません。");
                    return;
                }
                
                Log.d("MainActivity", "サンプルデータをデータベースに追加します");
                
                // サンプルデータの作成
                List<QuizEntity> sampleQuizzes = new ArrayList<>();
                
                // 第1章のサンプル
                for (int i = 1; i <= 3; i++) {
                    sampleQuizzes.add(createSampleQuiz("1-" + i, "1", "基本構文", "変数宣言", "easy"));
                }
                for (int i = 1; i <= 2; i++) {
                    sampleQuizzes.add(createSampleQuiz("1-" + (i+3), "1", "コンパイル", "コンパイルエラー", "medium"));
                }
                
                // 第2章のサンプル
                for (int i = 1; i <= 3; i++) {
                    sampleQuizzes.add(createSampleQuiz("2-" + i, "2", "データ型", "プリミティブ型", "easy"));
                }
                for (int i = 1; i <= 2; i++) {
                    sampleQuizzes.add(createSampleQuiz("2-" + (i+3), "2", "文字列", "Stringクラス", "medium"));
                }
                
                // 第3章のサンプル
                for (int i = 1; i <= 3; i++) {
                    sampleQuizzes.add(createSampleQuiz("3-" + i, "3", "演算子", "算術演算子", "easy"));
                }
                for (int i = 1; i <= 2; i++) {
                    sampleQuizzes.add(createSampleQuiz("3-" + (i+3), "3", "制御構造", "if文", "medium"));
                }
                
                // データベースに保存
                quizDao.insertAll(sampleQuizzes);
                
                Log.d("MainActivity", sampleQuizzes.size() + " 件のサンプルデータを追加しました");
                
            } catch (Exception e) {
                Log.e("MainActivity", "サンプルデータの追加に失敗しました", e);
            }
        }).start();
    }

    /**
     * サンプルのQuizEntityを作成するヘルパーメソッド
     */
    private QuizEntity createSampleQuiz(String qid, String chapter, String category, String questionCategory, String difficulty) {
        List<String> choices = Arrays.asList(
            "選択肢1", "選択肢2", "選択肢3", "選択肢4"
        );
        
        List<Integer> answers = Collections.singletonList(0); // 最初の選択肢が正解
        
        return new QuizEntity(
            qid,
            chapter,
            category,
            questionCategory,
            difficulty,
            "// サンプルコード\nint x = 10;",
            "サンプル問題: " + category + "（章: " + chapter + "）",
            choices,
            answers,
            "これはサンプル問題の解説です。"
        );
    }
}

================
File: src/main/java/com/example/contentful_javasilver/QuestionCategoryFragment.java
================
package com.example.contentful_javasilver;

import android.content.Intent;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.contentful_javasilver.data.QuizDao;
import com.example.contentful_javasilver.data.QuizDatabase;
import com.example.contentful_javasilver.databinding.FragmentQuestionCategoryBinding;
import com.example.contentful_javasilver.databinding.ItemQuestionCategoryBinding;

import java.util.ArrayList;
import java.util.List;

import kotlin.Unit;

import com.example.contentful_javasilver.DatabaseHelperCoroutines.QuestionCategoryItem;
import androidx.navigation.Navigation;

public class QuestionCategoryFragment extends Fragment {
    private FragmentQuestionCategoryBinding binding;
    private QuestionCategoryAdapter adapter;
    private QuizDao quizDao;
    private DatabaseHelperCoroutines databaseHelper;
    private String selectedCategory;

    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        binding = FragmentQuestionCategoryBinding.inflate(inflater, container, false);
        return binding.getRoot();
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        // 引数からデータを取得
        if (getArguments() != null) {
            selectedCategory = getArguments().getString("category");
        }

        // データベースの初期化
        QuizDatabase db = QuizDatabase.getDatabase(requireContext());
        quizDao = db.quizDao();
        databaseHelper = new DatabaseHelperCoroutines();

        setupViews();
        setupRecyclerView();
        loadQuestionCategories();
    }

    private void setupViews() {
        binding.categoryTitleText.setText(selectedCategory);
        binding.backButton.setOnClickListener(v -> requireActivity().getSupportFragmentManager().popBackStack());
    }

    private void setupRecyclerView() {
        binding.questionCategoryRecyclerView.setLayoutManager(new LinearLayoutManager(requireContext()));
        binding.questionCategoryRecyclerView.setHasFixedSize(true);
        adapter = new QuestionCategoryAdapter(new ArrayList<>());
        binding.questionCategoryRecyclerView.setAdapter(adapter);
    }

    private void loadQuestionCategories() {
        databaseHelper.loadQuestionCategoriesAsync(
            selectedCategory,
            quizDao,
            questionCategories -> {
                adapter.updateQuestionCategories(questionCategories);
                return Unit.INSTANCE;
            },
            error -> {
                Toast.makeText(requireContext(), error, Toast.LENGTH_SHORT).show();
                return Unit.INSTANCE;
            }
        );
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        databaseHelper.cleanup();
        binding = null;
    }

    // RecyclerViewのアダプター
    private class QuestionCategoryAdapter extends RecyclerView.Adapter<QuestionCategoryAdapter.ViewHolder> {
        private List<QuestionCategoryItem> items;

        QuestionCategoryAdapter(List<QuestionCategoryItem> items) {
            this.items = new ArrayList<>(items);
        }

        public void updateQuestionCategories(List<QuestionCategoryItem> newItems) {
            this.items.clear();
            this.items.addAll(newItems);
            notifyDataSetChanged();
        }

        @NonNull
        @Override
        public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
            ItemQuestionCategoryBinding itemBinding = ItemQuestionCategoryBinding.inflate(
                    LayoutInflater.from(parent.getContext()), parent, false);
            return new ViewHolder(itemBinding);
        }

        @Override
        public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
            QuestionCategoryItem item = items.get(position);
            holder.binding.qidText.setText(item.getQid());
            holder.binding.questionCategoryText.setText(item.getQuestionCategory());

            holder.itemView.setOnClickListener(v -> {
                // 引数を設定してQuizFragmentに遷移
                Bundle args = new Bundle();
                args.putString("qid", item.getQid());
                
                Navigation.findNavController(v).navigate(
                    R.id.action_questionCategoryFragment_to_quizFragment, 
                    args
                );
            });
        }

        @Override
        public int getItemCount() {
            return items.size();
        }

        class ViewHolder extends RecyclerView.ViewHolder {
            ItemQuestionCategoryBinding binding;

            ViewHolder(ItemQuestionCategoryBinding binding) {
                super(binding.getRoot());
                this.binding = binding;
            }
        }
    }
}

================
File: src/main/java/com/example/contentful_javasilver/QuestionCategorySelectActivity.java
================
package com.example.contentful_javasilver;

import android.content.Intent;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.ViewGroup;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.contentful_javasilver.data.QuizDao;
import com.example.contentful_javasilver.data.QuizDatabase;
import com.example.contentful_javasilver.databinding.ActivityQuestionCategorySelectBinding;
import com.example.contentful_javasilver.databinding.ItemQuestionCategoryBinding;

import java.util.ArrayList;
import java.util.List;

import kotlin.Unit;

import com.example.contentful_javasilver.DatabaseHelperCoroutines.QuestionCategoryItem;

public class QuestionCategorySelectActivity extends AppCompatActivity {
    private ActivityQuestionCategorySelectBinding binding;
    private QuestionCategoryAdapter adapter;
    private QuizDao quizDao;
    private DatabaseHelperCoroutines databaseHelper;
    private String selectedCategory;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivityQuestionCategorySelectBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        // インテントからデータを取得
        selectedCategory = getIntent().getStringExtra("category");

        // データベースの初期化
        QuizDatabase db = QuizDatabase.getDatabase(this);
        quizDao = db.quizDao();
        databaseHelper = new DatabaseHelperCoroutines();

        setupViews();
        setupRecyclerView();
        loadQuestionCategories();
    }

    private void setupViews() {
        binding.categoryTitleText.setText(selectedCategory);
        binding.backButton.setOnClickListener(v -> finish());
    }

    private void setupRecyclerView() {
        binding.questionCategoryRecyclerView.setLayoutManager(new LinearLayoutManager(this));
        binding.questionCategoryRecyclerView.setHasFixedSize(true);
        adapter = new QuestionCategoryAdapter(new ArrayList<>());
        binding.questionCategoryRecyclerView.setAdapter(adapter);
    }

    private void loadQuestionCategories() {
        databaseHelper.loadQuestionCategoriesAsync(
            selectedCategory,
            quizDao,
            questionCategories -> {
                adapter.updateQuestionCategories(questionCategories);
                return Unit.INSTANCE;
            },
            error -> {
                Toast.makeText(this, error, Toast.LENGTH_SHORT).show();
                return Unit.INSTANCE;
            }
        );
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        databaseHelper.cleanup();
    }

    // RecyclerViewのアダプター
    private class QuestionCategoryAdapter extends RecyclerView.Adapter<QuestionCategoryAdapter.ViewHolder> {
        private List<QuestionCategoryItem> items;

        QuestionCategoryAdapter(List<QuestionCategoryItem> items) {
            this.items = new ArrayList<>(items);
        }

        public void updateQuestionCategories(List<QuestionCategoryItem> newItems) {
            this.items.clear();
            this.items.addAll(newItems);
            notifyDataSetChanged();
        }

        @NonNull
        @Override
        public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
            ItemQuestionCategoryBinding itemBinding = ItemQuestionCategoryBinding.inflate(
                    LayoutInflater.from(parent.getContext()), parent, false);
            return new ViewHolder(itemBinding);
        }

        @Override
        public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
            QuestionCategoryItem item = items.get(position);
            holder.binding.qidText.setText(item.getQid());
            holder.binding.questionCategoryText.setText(item.getQuestionCategory());

            holder.itemView.setOnClickListener(v -> {
                Intent intent = new Intent(QuestionCategorySelectActivity.this, QuizActivity.class);
                intent.putExtra("qid", item.getQid());
                startActivity(intent);
            });
        }

        @Override
        public int getItemCount() {
            return items.size();
        }

        class ViewHolder extends RecyclerView.ViewHolder {
            ItemQuestionCategoryBinding binding;

            ViewHolder(ItemQuestionCategoryBinding binding) {
                super(binding.getRoot());
                this.binding = binding;
            }
        }
    }
}

================
File: src/main/java/com/example/contentful_javasilver/QuizActivity.java
================
package com.example.contentful_javasilver;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import androidx.activity.EdgeToEdge;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;

import com.contentful.java.cda.CDAEntry;
import com.example.contentful_javasilver.data.QuizDatabase;
import com.example.contentful_javasilver.data.QuizEntity;
import com.example.contentful_javasilver.databinding.ActivityQuizBinding;
import com.google.android.material.dialog.MaterialAlertDialogBuilder;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import kotlin.Unit;

public class QuizActivity extends AppCompatActivity implements View.OnClickListener {

    private ActivityQuizBinding binding;
    private List<Integer> rightAnswers;
    private int rightAnswerCount;
    private int quizCount = 1;
    private static final int QUIZ_COUNT = 5;
    private static final String ACCESS_TOKEN = BuildConfig.CONTENTFUL_ACCESS_TOKEN;
    private static final String SPACE_ID = BuildConfig.CONTENTFUL_SPACE_ID;
    private TextView codeBlock1;
    private QuizDatabase db;
    private List<QuizEntity> quizEntities = new ArrayList<>();
    private int currentQuizIndex = 0;
    private AsyncHelperCoroutines asyncHelper;
    private List<QuizEntity> allQuizzes = new ArrayList<>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EdgeToEdge.enable(this);
        binding = ActivityQuizBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        // TextViewの参照を取得
        codeBlock1 = binding.codeBlock;

        // Roomデータベースの初期化
        db = QuizDatabase.getDatabase(this);
        asyncHelper = new AsyncHelperCoroutines(new ContentfulGetApi(SPACE_ID, ACCESS_TOKEN));

        // データベースにデータがあるかチェック
        loadQuizzesFromDatabase();

        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {
            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);
            return insets;
        });

        binding.answerBtn1.setOnClickListener(this);
        binding.answerBtn2.setOnClickListener(this);
        binding.answerBtn3.setOnClickListener(this);
        binding.answerBtn4.setOnClickListener(this);
    }

    private void fetchFromContentful() {
        asyncHelper.fetchEntriesAsync("javaSilverQ",
            entries -> {
                List<QuizEntity> entities = new ArrayList<>();
                for (CDAEntry entry : entries) {
                    // Double型のanswerをInteger型に変換
                    List<Double> rawAnswers = entry.getField("answer");
                    List<Integer> intAnswers = new ArrayList<>();
                    for (Double answer : rawAnswers) {
                        intAnswers.add(answer.intValue());
                    }

                    QuizEntity entity = new QuizEntity(
                        entry.getField("qid"),
                        entry.getField("chapter"),
                        entry.getField("category"),
                        entry.getField("questioncategory"),
                        entry.getField("difficulty"),
                        entry.getField("code"),
                        entry.getField("questionText"),
                        entry.getField("choices"),
                        intAnswers,
                        entry.getField("explanation")
                    );
                    entities.add(entity);
                }
                
                // データベースに保存
                asyncHelper.insertQuizEntitiesAsync(db, entities,
                    () -> {
                        loadQuizzesFromDatabase();
                        return Unit.INSTANCE;
                    },
                    error -> {
                        Toast.makeText(this, error, Toast.LENGTH_LONG).show();
                        return Unit.INSTANCE;
                    }
                );
                return Unit.INSTANCE;
            },
            error -> {
                Toast.makeText(this, error, Toast.LENGTH_LONG).show();
                return Unit.INSTANCE;
            }
        );
    }

    private void loadQuizzesFromDatabase() {
        new Thread(() -> {
            try {
                allQuizzes = db.quizDao().getAllQuizzes();
                if (allQuizzes.isEmpty()) {
                    runOnUiThread(() -> fetchFromContentful());
                } else {
                    getRandomQuizzes();
                }
            } catch (Exception e) {
                e.printStackTrace();
                runOnUiThread(() -> Toast.makeText(this, "データの読み込みに失敗しました", Toast.LENGTH_LONG).show());
            }
        }).start();
    }

    private void getRandomQuizzes() {
        List<QuizEntity> shuffled = new ArrayList<>(allQuizzes);
        Collections.shuffle(shuffled);
        quizEntities = shuffled.subList(0, Math.min(QUIZ_COUNT, shuffled.size()));
        runOnUiThread(this::showNextQuiz);
    }

    private void showNextQuiz() {
        QuizEntity currentQuiz = quizEntities.get(currentQuizIndex);
        
        // 変更があった場合のみ更新
        if (!currentQuiz.getQid().equals(binding.countLabel.getText())) {
            binding.countLabel.setText(currentQuiz.getQid());
        }
        
        if (!currentQuiz.getQuestionText().equals(binding.questionLabel.getText())) {
            binding.questionLabel.setText(currentQuiz.getQuestionText());
        }
        
        // コードブロックの表示/非表示の最適化
        String code = currentQuiz.getCode();
        if (code != null && !code.isEmpty()) {
            if (codeBlock1.getVisibility() != View.VISIBLE || !code.equals(codeBlock1.getText())) {
                codeBlock1.setText(code);
                codeBlock1.setVisibility(View.VISIBLE);
            }
        } else if (codeBlock1.getVisibility() != View.GONE) {
            codeBlock1.setVisibility(View.GONE);
        }

        List<String> choices = currentQuiz.getChoices();
        rightAnswers = currentQuiz.getAnswer();

        android.util.Log.d("QuizActivity", "正解のインデックス: " + rightAnswers.toString());

        binding.answerBtn1.setText(choices.get(0));
        binding.answerBtn2.setText(choices.get(1));
        binding.answerBtn3.setText(choices.get(2));
        binding.answerBtn4.setText(choices.get(3));
    }

    private void showResult() {
        String resultMessage = String.format("クイズ終了！\n正解数: %d/%d", rightAnswerCount, QUIZ_COUNT);
        new MaterialAlertDialogBuilder(this)
                .setTitle("結果")
                .setMessage(resultMessage)
                .setPositiveButton("OK", (dialogInterface, i) -> finish())
                .setCancelable(false)
                .show();
    }

    @Override
    public void onClick(View view) {
        Button answerBtn = findViewById(view.getId());
        String btnText = answerBtn.getText().toString();
        
        QuizEntity currentQuiz = quizEntities.get(currentQuizIndex);
        List<String> choices = currentQuiz.getChoices();
        int selectedIndex = choices.indexOf(btnText);
        
        String alertTitle;
        String explanation = currentQuiz.getExplanation();
        
        if (rightAnswers.contains(selectedIndex)) {
            alertTitle = "正解!";
            rightAnswerCount++;
        } else {
            alertTitle = "不正解...";
        }

        new MaterialAlertDialogBuilder(this)
                .setTitle(alertTitle)
                .setMessage("解説: " + explanation)
                .setPositiveButton("OK", (dialogInterface, i) -> {
                    if (quizCount == QUIZ_COUNT) {
                        showResult();
                    } else {
                        quizCount++;
                        currentQuizIndex++;
                        showNextQuiz();
                    }
                })
                .setCancelable(false)
                .show();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (asyncHelper != null) {
            asyncHelper.cleanup();
        }
    }
}

================
File: src/main/java/com/example/contentful_javasilver/QuizFragment.java
================
package com.example.contentful_javasilver;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;

import com.example.contentful_javasilver.data.QuizEntity;
import com.example.contentful_javasilver.databinding.FragmentQuizBinding;
import com.example.contentful_javasilver.viewmodels.QuizViewModel;
import com.google.android.material.dialog.MaterialAlertDialogBuilder;

import java.util.List;

public class QuizFragment extends Fragment implements View.OnClickListener {

    private FragmentQuizBinding binding;
    private QuizViewModel viewModel;
    private TextView codeBlock;
    private List<Integer> rightAnswers;
    private String qid;
    private static final int QUIZ_COUNT = 5;

    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        binding = FragmentQuizBinding.inflate(inflater, container, false);
        return binding.getRoot();
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        // 引数からデータを取得
        if (getArguments() != null) {
            qid = getArguments().getString("qid");
        }

        // TextViewの参照を取得
        codeBlock = binding.codeBlock;

        // ViewModelの取得
        viewModel = new ViewModelProvider(this).get(QuizViewModel.class);

        // UIの初期設定
        setupObservers();
        setupClickListeners();

        // クイズをロード
        if (qid != null && !qid.isEmpty()) {
            viewModel.loadQuizzesByQid(qid);
        } else {
            viewModel.loadQuizzesByCategory("全般");
        }
    }

    private void setupObservers() {
        // 現在のクイズの監視
        viewModel.getCurrentQuiz().observe(getViewLifecycleOwner(), quiz -> {
            if (quiz != null) {
                updateQuizUI(quiz);
            }
        });
        
        // エラーメッセージの監視
        viewModel.getErrorMessage().observe(getViewLifecycleOwner(), error -> {
            if (error != null && !error.isEmpty()) {
                Toast.makeText(requireContext(), error, Toast.LENGTH_LONG).show();
            }
        });
        
        // ローディング状態の監視
        viewModel.getIsLoading().observe(getViewLifecycleOwner(), isLoading -> {
            // ローディングインジケーターの表示/非表示
            // 今回はシンプルにするため実装しません
        });
    }

    private void setupClickListeners() {
        binding.answerBtn1.setOnClickListener(this);
        binding.answerBtn2.setOnClickListener(this);
        binding.answerBtn3.setOnClickListener(this);
        binding.answerBtn4.setOnClickListener(this);
    }

    private void updateQuizUI(QuizEntity quiz) {
        // 変更があった場合のみ更新
        if (!quiz.getQid().equals(binding.countLabel.getText().toString())) {
            binding.countLabel.setText(quiz.getQid());
        }
        
        if (!quiz.getQuestionText().equals(binding.questionLabel.getText().toString())) {
            binding.questionLabel.setText(quiz.getQuestionText());
        }
        
        // コードブロックの表示/非表示の最適化
        String code = quiz.getCode();
        if (code != null && !code.isEmpty()) {
            if (codeBlock.getVisibility() != View.VISIBLE || !code.equals(codeBlock.getText().toString())) {
                codeBlock.setText(code);
                codeBlock.setVisibility(View.VISIBLE);
            }
        } else if (codeBlock.getVisibility() != View.GONE) {
            codeBlock.setVisibility(View.GONE);
        }

        List<String> choices = quiz.getChoices();
        rightAnswers = quiz.getAnswer();

        binding.answerBtn1.setText(choices.get(0));
        binding.answerBtn2.setText(choices.get(1));
        binding.answerBtn3.setText(choices.get(2));
        binding.answerBtn4.setText(choices.get(3));
    }

    private void showResult() {
        String resultMessage = String.format("クイズ終了！\n正解数: %d/%d", 
                viewModel.getCorrectAnswerCount().getValue(), QUIZ_COUNT);
        new MaterialAlertDialogBuilder(requireContext())
                .setTitle("結果")
                .setMessage(resultMessage)
                .setPositiveButton("OK", (dialogInterface, i) -> {
                    requireActivity().getSupportFragmentManager().popBackStack();
                })
                .setCancelable(false)
                .show();
    }

    @Override
    public void onClick(View view) {
        int id = view.getId();
        Button answerBtn = requireView().findViewById(id);
        String btnText = answerBtn.getText().toString();
        
        QuizEntity currentQuiz = viewModel.getCurrentQuiz().getValue();
        if (currentQuiz == null) return;
        
        List<String> choices = currentQuiz.getChoices();
        int selectedIndex = choices.indexOf(btnText);
        
        String alertTitle;
        String explanation = currentQuiz.getExplanation();
        
        if (rightAnswers.contains(selectedIndex)) {
            alertTitle = "正解!";
            viewModel.incrementCorrectAnswerCount();
        } else {
            alertTitle = "不正解...";
        }
        
        new MaterialAlertDialogBuilder(requireContext())
                .setTitle(alertTitle)
                .setMessage(explanation)
                .setPositiveButton("OK", (dialogInterface, i) -> {
                    Integer nextIndex = viewModel.getCurrentQuizIndex().getValue();
                    if (nextIndex != null && nextIndex + 1 < QUIZ_COUNT) {
                        viewModel.moveToNextQuiz();
                    } else {
                        showResult();
                    }
                })
                .setCancelable(false)
                .show();
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        binding = null;
    }
}

================
File: src/main/java/com/example/contentful_javasilver/SettingsFragment.java
================
package com.example.contentful_javasilver;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;

public class SettingsFragment extends Fragment {

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_settings, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        
        // 設定画面の初期化
        // 将来的に設定項目を追加することができます
    }
}

================
File: src/main/java/com/example/contentful_javasilver/StartActivity.java
================
package com.example.contentful_javasilver;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.view.animation.AlphaAnimation;
import android.view.animation.Animation;

import androidx.appcompat.app.AppCompatActivity;

public class StartActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_start);

        View rootView = findViewById(R.id.rootLayout);
        rootView.setOnClickListener(v -> {
            // クリックイベントの重複を防ぐ
            rootView.setClickable(false);

            // フェードアウトアニメーション
            AlphaAnimation fadeOut = new AlphaAnimation(1.0f, 0.0f);
            fadeOut.setDuration(300);
            fadeOut.setFillAfter(true);
            fadeOut.setFillEnabled(true);
            fadeOut.setAnimationListener(new Animation.AnimationListener() {
                private boolean hasEnded = false;

                @Override
                public void onAnimationStart(Animation animation) {}

                @Override
                public void onAnimationEnd(Animation animation) {
                    if (!hasEnded) {
                        hasEnded = true;
                        // ロード画面に遷移
                        Intent intent = new Intent(StartActivity.this, LoadingActivity.class);
                        startActivity(intent);
                        overridePendingTransition(0, 0);
                        finish();
                    }
                }

                @Override
                public void onAnimationRepeat(Animation animation) {}
            });
            rootView.startAnimation(fadeOut);
        });
    }
}

================
File: src/main/java/com/example/contentful_javasilver/StartFragment.java
================
package com.example.contentful_javasilver;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.navigation.Navigation;

public class StartFragment extends Fragment {

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_start, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        Button startButton = view.findViewById(R.id.startButton);
        startButton.setOnClickListener(v -> {
            // LoadingFragmentへナビゲーション
            Navigation.findNavController(v).navigate(R.id.action_start_to_loading);
        });
    }
}

================
File: src/main/java/com/example/contentful_javasilver/utils/SecurePreferences.java
================
package com.example.contentful_javasilver.utils;

import android.content.Context;
import android.content.SharedPreferences;
import android.security.keystore.KeyGenParameterSpec;
import android.security.keystore.KeyProperties;
import android.util.Base64;

import androidx.security.crypto.EncryptedSharedPreferences;
import androidx.security.crypto.MasterKey;

import java.io.IOException;
import java.security.GeneralSecurityException;

/**
 * 安全な暗号化されたSharedPreferencesを提供するユーティリティクラス
 */
public class SecurePreferences {
    private static final String PREFERENCES_FILE_NAME = "secure_prefs";
    private static final String API_KEY_CONTENTFUL = "contentful_api_key";
    private static final String SPACE_ID_CONTENTFUL = "contentful_space_id";
    private static SharedPreferences securePrefs;

    /**
     * 暗号化されたSharedPreferencesを初期化
     * @param context アプリケーションコンテキスト
     * @return 初期化されたPreferences
     */
    public static SharedPreferences getSecurePreferences(Context context) {
        if (securePrefs == null) {
            try {
                // マスターキーを生成
                KeyGenParameterSpec spec = new KeyGenParameterSpec.Builder(
                        MasterKey.DEFAULT_MASTER_KEY_ALIAS,
                        KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)
                        .setBlockModes(KeyProperties.BLOCK_MODE_GCM)
                        .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE)
                        .setKeySize(256)
                        .build();

                MasterKey masterKey = new MasterKey.Builder(context)
                        .setKeyGenParameterSpec(spec)
                        .build();

                // 暗号化されたSharedPreferencesを作成
                securePrefs = EncryptedSharedPreferences.create(
                        context,
                        PREFERENCES_FILE_NAME,
                        masterKey,
                        EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,
                        EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM
                );
            } catch (GeneralSecurityException | IOException e) {
                // フォールバックとして通常のSharedPreferencesを使用
                securePrefs = context.getSharedPreferences(PREFERENCES_FILE_NAME, Context.MODE_PRIVATE);
            }
        }
        return securePrefs;
    }

    /**
     * Contentful APIキーを保存
     */
    public static void saveContentfulApiKey(Context context, String apiKey) {
        getSecurePreferences(context).edit().putString(API_KEY_CONTENTFUL, apiKey).apply();
    }

    /**
     * Contentful APIキーを取得
     */
    public static String getContentfulApiKey(Context context) {
        return getSecurePreferences(context).getString(API_KEY_CONTENTFUL, "");
    }

    /**
     * Contentful SPACE_IDを保存
     */
    public static void saveContentfulSpaceId(Context context, String spaceId) {
        getSecurePreferences(context).edit().putString(SPACE_ID_CONTENTFUL, spaceId).apply();
    }

    /**
     * Contentful SPACE_IDを取得
     */
    public static String getContentfulSpaceId(Context context) {
        return getSecurePreferences(context).getString(SPACE_ID_CONTENTFUL, "");
    }

    /**
     * 初期APIキーを安全に保存する（アプリ初回起動時のみ）
     */
    public static void initializeSecureKeys(Context context, String contentfulApiKey, String contentfulSpaceId) {
        SharedPreferences prefs = getSecurePreferences(context);
        
        // キーがまだ保存されていない場合のみ保存
        if (prefs.getString(API_KEY_CONTENTFUL, "").isEmpty()) {
            prefs.edit().putString(API_KEY_CONTENTFUL, contentfulApiKey).apply();
        }
        
        if (prefs.getString(SPACE_ID_CONTENTFUL, "").isEmpty()) {
            prefs.edit().putString(SPACE_ID_CONTENTFUL, contentfulSpaceId).apply();
        }
    }
}

================
File: src/main/java/com/example/contentful_javasilver/viewmodels/QuizViewModel.java
================
package com.example.contentful_javasilver.viewmodels;

import android.app.Application;
import androidx.annotation.NonNull;
import androidx.lifecycle.AndroidViewModel;
import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.Transformations;

import com.contentful.java.cda.CDAEntry;
import com.example.contentful_javasilver.ContentfulGetApi;
import com.example.contentful_javasilver.DatabaseHelperCoroutines;
import com.example.contentful_javasilver.AsyncHelperCoroutines;
import com.example.contentful_javasilver.data.DatabaseTransaction;
import com.example.contentful_javasilver.data.QuizDatabase;
import com.example.contentful_javasilver.data.QuizEntity;
import com.example.contentful_javasilver.utils.SecurePreferences;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;

import kotlin.Unit;
import android.util.Log;

/**
 * クイズデータを管理するViewModel
 */
public class QuizViewModel extends AndroidViewModel {
    private static final String TAG = "QuizViewModel";
    private final QuizDatabase database;
    private final DatabaseHelperCoroutines databaseHelper;
    private final AsyncHelperCoroutines asyncHelper;
    private final ContentfulGetApi contentfulApi;
    private final Executor executor;
    
    // 選択されたクイズのLiveData
    private final MutableLiveData<List<QuizEntity>> selectedQuizzes = new MutableLiveData<>();
    // 現在のクイズインデックス
    private final MutableLiveData<Integer> currentQuizIndex = new MutableLiveData<>(0);
    // エラーメッセージ
    private final MutableLiveData<String> errorMessage = new MutableLiveData<>();
    // 正解数
    private final MutableLiveData<Integer> correctAnswerCount = new MutableLiveData<>(0);
    // データロード中フラグ
    private final MutableLiveData<Boolean> isLoading = new MutableLiveData<>(false);
    
    // 現在のクイズを取得するための変換
    private final LiveData<QuizEntity> currentQuiz;
    
    public QuizViewModel(@NonNull Application application) {
        super(application);
        database = QuizDatabase.getDatabase(application);
        
        // 安全にAPIキーを取得
        String apiKey = SecurePreferences.getContentfulApiKey(application);
        String spaceId = SecurePreferences.getContentfulSpaceId(application);
        
        contentfulApi = new ContentfulGetApi(spaceId, apiKey);
        databaseHelper = new DatabaseHelperCoroutines();
        asyncHelper = new AsyncHelperCoroutines(contentfulApi);
        executor = Executors.newSingleThreadExecutor();
        
        // 現在のクイズを取得する変換を設定
        currentQuiz = Transformations.map(currentQuizIndex, index -> {
            List<QuizEntity> quizzes = selectedQuizzes.getValue();
            if (quizzes != null && index >= 0 && index < quizzes.size()) {
                return quizzes.get(index);
            }
            return null;
        });
    }
    
    /**
     * 指定されたカテゴリのクイズを取得
     * @param category カテゴリ
     */
    public void loadQuizzesByCategory(String category) {
        isLoading.setValue(true);
        executor.execute(() -> {
            try {
                LiveData<List<QuizEntity>> quizzesByCategory = database.quizDao().getQuizzesByCategory(category);
                // LiveDataの結果を単一スナップショットとして取得する必要があるため
                // 代わりに同期メソッドを使用
                List<QuizEntity> quizzes = database.quizDao().getAllQuizzes();
                List<QuizEntity> filteredQuizzes = new ArrayList<>();
                
                // カテゴリでフィルタリング
                for (QuizEntity quiz : quizzes) {
                    if (category.equals(quiz.getCategory())) {
                        filteredQuizzes.add(quiz);
                    }
                }
                
                if (filteredQuizzes.isEmpty()) {
                    fetchFromContentful();
                } else {
                    // リストをシャッフルして先頭から5問を取得
                    Collections.shuffle(filteredQuizzes);
                    int limit = Math.min(5, filteredQuizzes.size());
                    selectedQuizzes.postValue(filteredQuizzes.subList(0, limit));
                    isLoading.postValue(false);
                }
            } catch (Exception e) {
                errorMessage.postValue("データの読み込みに失敗しました: " + e.getMessage());
                isLoading.postValue(false);
            }
        });
    }
    
    /**
     * QIDでクイズを取得
     * @param qid クイズID
     */
    public void loadQuizzesByQid(String qid) {
        isLoading.setValue(true);
        executor.execute(() -> {
            try {
                List<QuizEntity> quizzes = database.quizDao().getQuizzesByQid(qid);
                if (quizzes.isEmpty()) {
                    fetchFromContentful();
                } else {
                    selectedQuizzes.postValue(quizzes);
                    isLoading.postValue(false);
                }
            } catch (Exception e) {
                errorMessage.postValue("データの読み込みに失敗しました: " + e.getMessage());
                isLoading.postValue(false);
            }
        });
    }
    
    /**
     * Contentfulからデータを取得
     */
    private void fetchFromContentful() {
        Log.d(TAG, "Fetching data from Contentful...");
        asyncHelper.fetchEntriesAsync("javaSilverQ",
            entries -> {
                Log.d(TAG, "Received " + entries.size() + " entries from Contentful");
                List<QuizEntity> entities = new ArrayList<>();
                for (CDAEntry entry : entries) {
                    try {
                        // 各フィールドを取得する前にログ出力
                        Log.d(TAG, "Processing entry: " + entry.id());
                        
                        String qid = getField(entry, "qid");
                        String chapter = getField(entry, "chapter");
                        String category = getField(entry, "category");
                        
                        // questionCategoryフィールドは大文字小文字に注意
                        String questionCategory;
                        try {
                            questionCategory = getField(entry, "questionCategory");
                            if (questionCategory.isEmpty()) {
                                questionCategory = getField(entry, "questioncategory");
                            }
                        } catch (Exception e) {
                            try {
                                questionCategory = getField(entry, "questioncategory");
                            } catch (Exception ex) {
                                Log.w(TAG, "Entry " + entry.id() + " has no questionCategory field");
                                questionCategory = "";
                            }
                        }
                        
                        String difficulty = getField(entry, "difficulty");
                        String code = getField(entry, "code");
                        String questionText = getField(entry, "questionText");
                        
                        // choicesとanswerの取得
                        List<String> choices = entry.getField("choices");
                        
                        // Double型のanswerをInteger型に変換
                        List<Double> rawAnswers = entry.getField("answer");
                        List<Integer> intAnswers = new ArrayList<>();
                        for (Double answer : rawAnswers) {
                            intAnswers.add(answer.intValue());
                        }
                        
                        String explanation = getField(entry, "explanation");

                        QuizEntity entity = new QuizEntity(
                            qid,
                            chapter,
                            category,
                            questionCategory,
                            difficulty,
                            code,
                            questionText,
                            choices,
                            intAnswers,
                            explanation
                        );
                        
                        Log.d(TAG, "Created entity: " + entity.toString());
                        entities.add(entity);
                    } catch (Exception e) {
                        Log.e(TAG, "Error processing entry: " + entry.id(), e);
                    }
                }
                
                if (entities.isEmpty()) {
                    Log.w(TAG, "No valid entities were created from Contentful entries");
                    errorMessage.postValue("有効なデータが見つかりませんでした");
                    isLoading.postValue(false);
                    return Unit.INSTANCE;
                }
                
                Log.d(TAG, "Saving " + entities.size() + " entities to database");
                // データベースに保存
                asyncHelper.insertQuizEntitiesAsync(database, entities,
                    () -> {
                        // 保存完了後、再度データを読み込む
                        Log.d(TAG, "Entities saved successfully, loading random quizzes");
                        executor.execute(() -> {
                            List<QuizEntity> randomQuizzes = database.quizDao().getRandomQuizzesSync(5);
                            selectedQuizzes.postValue(randomQuizzes);
                            isLoading.postValue(false);
                        });
                        return Unit.INSTANCE;
                    },
                    error -> {
                        Log.e(TAG, "Error saving entities: " + error);
                        errorMessage.postValue(error);
                        isLoading.postValue(false);
                        return Unit.INSTANCE;
                    }
                );
                return Unit.INSTANCE;
            },
            error -> {
                Log.e(TAG, "Error fetching from Contentful: " + error);
                errorMessage.postValue(error);
                isLoading.postValue(false);
                return Unit.INSTANCE;
            }
        );
    }
    
    /**
     * エントリからフィールドを安全に取得するヘルパーメソッド
     */
    private String getField(CDAEntry entry, String fieldName) {
        try {
            Object value = entry.getField(fieldName);
            return value != null ? value.toString() : "";
        } catch (Exception e) {
            Log.w(TAG, "Error getting field " + fieldName + ": " + e.getMessage());
            return "";
        }
    }
    
    /**
     * 次のクイズに進む
     */
    public void moveToNextQuiz() {
        Integer current = currentQuizIndex.getValue();
        if (current != null) {
            currentQuizIndex.setValue(current + 1);
        }
    }
    
    /**
     * 正解をカウント
     */
    public void incrementCorrectAnswerCount() {
        Integer count = correctAnswerCount.getValue();
        if (count != null) {
            correctAnswerCount.setValue(count + 1);
        }
    }
    
    /**
     * 選択されたクイズのLiveData
     */
    public LiveData<List<QuizEntity>> getSelectedQuizzes() {
        return selectedQuizzes;
    }
    
    /**
     * 現在のクイズLiveData
     */
    public LiveData<QuizEntity> getCurrentQuiz() {
        return currentQuiz;
    }
    
    /**
     * 現在のクイズインデックスLiveData
     */
    public LiveData<Integer> getCurrentQuizIndex() {
        return currentQuizIndex;
    }
    
    /**
     * エラーメッセージLiveData
     */
    public LiveData<String> getErrorMessage() {
        return errorMessage;
    }
    
    /**
     * 正解数LiveData
     */
    public LiveData<Integer> getCorrectAnswerCount() {
        return correctAnswerCount;
    }
    
    /**
     * ローディング状態LiveData
     */
    public LiveData<Boolean> getIsLoading() {
        return isLoading;
    }
    
    /**
     * リソースをクリーンアップ
     */
    @Override
    protected void onCleared() {
        super.onCleared();
        databaseHelper.cleanup();
        asyncHelper.cleanup();
    }
}

================
File: src/main/res/anim/slide_in_left.xml
================
<?xml version="1.0" encoding="utf-8"?>
<set xmlns:android="http://schemas.android.com/apk/res/android">
    <translate
        android:duration="300"
        android:fromXDelta="-100%"
        android:toXDelta="0%" />
</set>

================
File: src/main/res/anim/slide_in_right.xml
================
<?xml version="1.0" encoding="utf-8"?>
<set xmlns:android="http://schemas.android.com/apk/res/android">
    <translate
        android:duration="300"
        android:fromXDelta="100%"
        android:toXDelta="0%" />
</set>

================
File: src/main/res/anim/slide_out_left.xml
================
<?xml version="1.0" encoding="utf-8"?>
<set xmlns:android="http://schemas.android.com/apk/res/android">
    <translate
        android:duration="300"
        android:fromXDelta="0%"
        android:toXDelta="-100%" />
</set>

================
File: src/main/res/anim/slide_out_right.xml
================
<?xml version="1.0" encoding="utf-8"?>
<set xmlns:android="http://schemas.android.com/apk/res/android">
    <translate
        android:duration="300"
        android:fromXDelta="0%"
        android:toXDelta="100%" />
</set>

================
File: src/main/res/drawable/button_background_small.xml
================
<?xml version="1.0" encoding="utf-8"?>
<ripple xmlns:android="http://schemas.android.com/apk/res/android"
    android:color="@color/ripple_color">
    <item>
        <shape android:shape="rectangle">
            <corners android:radius="4dp" />
            <solid android:color="@color/surface_color" />
            <stroke
                android:width="1dp"
                android:color="@color/accent_color" />
        </shape>
    </item>
</ripple>

================
File: src/main/res/drawable/button_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<ripple xmlns:android="http://schemas.android.com/apk/res/android"
    android:color="@color/ripple_color">
    <item>
        <shape android:shape="rectangle">
            <corners android:radius="8dp" />
            <solid android:color="@color/accent_color" />
        </shape>
    </item>
</ripple>

================
File: src/main/res/drawable/ic_arrow_back.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#000000"
        android:pathData="M20,11H7.83l5.59,-5.59L12,4l-8,8 8,8 1.41,-1.41L7.83,13H20v-2z"/>
</vector>

================
File: src/main/res/drawable/ic_arrow_forward.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#000000"
        android:pathData="M12,4l-1.41,1.41L16.17,11H4v2h12.17l-5.58,5.59L12,20l8,-8z"/>
</vector>

================
File: src/main/res/drawable/ic_book.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="@android:color/black"
        android:pathData="M18,2H6c-1.1,0 -2,0.9 -2,2v16c0,1.1 0.9,2 2,2h12c1.1,0 2,-0.9 2,-2V4c0,-1.1 -0.9,-2 -2,-2zM6,4h5v8l-2.5,-1.5L6,12V4z" />
</vector>

================
File: src/main/res/drawable/ic_bookmark.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="@android:color/black"
        android:pathData="M17,3H7c-1.1,0 -2,0.9 -2,2v16l7,-3 7,3V5c0,-1.1 -0.9,-2 -2,-2z" />
</vector>

================
File: src/main/res/drawable/ic_category.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="?attr/colorControlNormal"
        android:pathData="M12,2l-5.5,9h11L12,2zM12,5.84L13.93,9h-3.87L12,5.84zM17.5,13c-2.49,0 -4.5,2.01 -4.5,4.5s2.01,4.5 4.5,4.5 4.5,-2.01 4.5,-4.5 -2.01,-4.5 -4.5,-4.5zM17.5,20c-1.38,0 -2.5,-1.12 -2.5,-2.5s1.12,-2.5 2.5,-2.5 2.5,1.12 2.5,2.5 -1.12,2.5 -2.5,2.5zM3,21.5h8v-8L3,13.5v8zM5,15.5h4v4L5,19.5v-4z"/>
</vector>

================
File: src/main/res/drawable/ic_chapter.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M4,6L2,6v14c0,1.1 0.9,2 2,2h14v-2L4,20L4,6zM20,2L8,2c-1.1,0 -2,0.9 -2,2v12c0,1.1 0.9,2 2,2h12c1.1,0 2,-0.9 2,-2L22,4c0,-1.1 -0.9,-2 -2,-2zM19,11L9,11L9,9h10v2zM15,15L9,15v-2h6v2zM19,7L9,7L9,5h10v2z"/>
</vector>

================
File: src/main/res/drawable/ic_history.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="@android:color/black"
        android:pathData="M13,3c-4.97,0 -9,4.03 -9,9L1,12l3.89,3.89 0.07,0.14L9,12L6,12c0,-3.87 3.13,-7 7,-7s7,3.13 7,7 -3.13,7 -7,7c-1.93,0 -3.68,-0.79 -4.94,-2.06l-1.42,1.42C8.27,19.99 10.51,21 13,21c4.97,0 9,-4.03 9,-9s-4.03,-9 -9,-9zM12,8v5l4.28,2.54 0.72,-1.21 -3.5,-2.08L13.5,8L12,8z" />
</vector>

================
File: src/main/res/drawable/ic_home.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="@android:color/black"
        android:pathData="M10,20v-6h4v6h5v-8h3L12,3 2,12h3v8z" />
</vector>

================
File: src/main/res/drawable/ic_launcher_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>

================
File: src/main/res/drawable/ic_launcher_foreground.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>

================
File: src/main/res/drawable/ic_list.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="?attr/colorControlNormal"
        android:pathData="M3,13h2v-2H3v2zm0,4h2v-2H3v2zm0,-8h2V7H3v2zm4,4h14v-2H7v2zm0,4h14v-2H7v2zM7,7v2h14V7H7z"/>
</vector>

================
File: src/main/res/drawable/ic_settings.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="@android:color/black"
        android:pathData="M19.14,12.94c0.04,-0.3 0.06,-0.61 0.06,-0.94c0,-0.32 -0.02,-0.64 -0.07,-0.94l2.03,-1.58c0.18,-0.14 0.23,-0.41 0.12,-0.61l-1.92,-3.32c-0.12,-0.22 -0.37,-0.29 -0.59,-0.22l-2.39,0.96c-0.5,-0.38 -1.03,-0.7 -1.62,-0.94L14.4,2.81c-0.04,-0.24 -0.24,-0.41 -0.48,-0.41h-3.84c-0.24,0 -0.43,0.17 -0.47,0.41L9.25,5.35C8.66,5.59 8.12,5.92 7.63,6.29L5.24,5.33c-0.22,-0.08 -0.47,0 -0.59,0.22L2.74,8.87C2.62,9.08 2.66,9.34 2.86,9.48l2.03,1.58C4.84,11.36 4.8,11.69 4.8,12s0.02,0.64 0.07,0.94l-2.03,1.58c-0.18,0.14 -0.23,0.41 -0.12,0.61l1.92,3.32c0.12,0.22 0.37,0.29 0.59,0.22l2.39,-0.96c0.5,0.38 1.03,0.7 1.62,0.94l0.36,2.54c0.05,0.24 0.24,0.41 0.48,0.41h3.84c0.24,0 0.44,-0.17 0.47,-0.41l0.36,-2.54c0.59,-0.24 1.13,-0.56 1.62,-0.94l2.39,0.96c0.22,0.08 0.47,0 0.59,-0.22l1.92,-3.32c0.12,-0.22 0.07,-0.47 -0.12,-0.61L19.14,12.94zM12,15.6c-1.98,0 -3.6,-1.62 -3.6,-3.6s1.62,-3.6 3.6,-3.6s3.6,1.62 3.6,3.6S13.98,15.6 12,15.6z" />
</vector>

================
File: src/main/res/drawable/ic_shuffle.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="?attr/colorControlNormal"
        android:pathData="M10.59,9.17L5.41,4 4,5.41l5.17,5.17 1.42,-1.41zM14.5,4l2.04,2.04L4,18.59 5.41,20 17.96,7.46 20,9.5L20,4h-5.5zM14.83,13.41l-1.41,1.41 3.13,3.13L14.5,20L20,20v-5.5l-2.04,2.04 -3.13,-3.13z"/>
</vector>

================
File: src/main/res/drawable/jcv_logo.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <solid android:color="@color/accent_color" />
    <corners android:radius="8dp" />
    <size
        android:width="200dp"
        android:height="100dp" />
    <stroke
        android:width="2dp"
        android:color="@color/ripple_color" />
</shape>

================
File: src/main/res/drawable/start_button_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <solid android:color="#2196F3" />
    <corners android:radius="8dp" />
</shape>

================
File: src/main/res/layout/activity_category_select.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/background_color">

    <LinearLayout
        android:id="@+id/headerLayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:padding="16dp"
        app:layout_constraintTop_toTopOf="parent">

        <ImageButton
            android:id="@+id/backButton"
            android:layout_width="48dp"
            android:layout_height="48dp"
            android:background="?attr/selectableItemBackgroundBorderless"
            android:contentDescription="戻る"
            android:padding="12dp"
            android:src="@drawable/ic_arrow_back"
            app:tint="@color/accent_color" />

        <TextView
            android:id="@+id/chapterTitleText"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="8dp"
            android:layout_weight="1"
            android:text="第1章"
            android:textColor="@color/text_primary"
            android:textSize="24sp"
            android:textStyle="bold" />
    </LinearLayout>

    <TextView
        android:id="@+id/chapterDescriptionText"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginHorizontal="16dp"
        android:layout_marginTop="8dp"
        android:text="Java の概要と簡単なJavaプログラムの作成"
        android:textColor="@color/text_secondary"
        android:textSize="16sp"
        app:layout_constraintTop_toBottomOf="@id/headerLayout" />

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/categoryRecyclerView"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_marginTop="24dp"
        android:clipToPadding="false"
        android:paddingHorizontal="16dp"
        android:paddingBottom="16dp"
        app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
        app:layout_constraintTop_toBottomOf="@id/chapterDescriptionText"
        app:layout_constraintBottom_toBottomOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: src/main/res/layout/activity_chapter_select.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/background_color">

    <LinearLayout
        android:id="@+id/headerLayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:padding="16dp"
        app:layout_constraintTop_toTopOf="parent">

        <ImageButton
            android:id="@+id/backButton"
            android:layout_width="48dp"
            android:layout_height="48dp"
            android:background="?attr/selectableItemBackgroundBorderless"
            android:contentDescription="戻る"
            android:padding="12dp"
            android:src="@drawable/ic_arrow_back"
            app:tint="@color/accent_color" />

        <TextView
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="章を選択"
            android:textColor="@color/text_primary"
            android:textSize="24sp"
            android:textStyle="bold"
            android:layout_marginStart="8dp" />
    </LinearLayout>

    <com.google.android.material.card.MaterialCardView
        android:id="@+id/chapter1Card"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginHorizontal="16dp"
        android:layout_marginTop="24dp"
        app:cardCornerRadius="12dp"
        app:cardElevation="4dp"
        android:clickable="true"
        android:focusable="true"
        android:foreground="?attr/selectableItemBackground"
        app:layout_constraintTop_toBottomOf="@id/headerLayout"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        style="@style/Widget.Material3.CardView.Elevated">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            android:padding="16dp">

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="第1章"
                android:textColor="@color/accent_color"
                android:textSize="16sp"
                android:textStyle="bold" />

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="8dp"
                android:text="Java の概要と簡単なJavaプログラムの作成"
                android:textColor="@color/text_primary"
                android:textSize="16sp" />
        </LinearLayout>
    </com.google.android.material.card.MaterialCardView>

        <com.google.android.material.card.MaterialCardView
            android:id="@+id/chapter2Card"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginHorizontal="16dp"
            android:layout_marginTop="16dp"
            app:cardCornerRadius="12dp"
            app:cardElevation="4dp"
            android:clickable="true"
            android:focusable="true"
            android:foreground="?attr/selectableItemBackground"
            app:layout_constraintTop_toBottomOf="@id/chapter1Card"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            style="@style/Widget.Material3.CardView.Elevated">

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical"
                android:padding="16dp">

                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="第2章"
                    android:textColor="@color/accent_color"
                    android:textSize="16sp"
                    android:textStyle="bold" />

                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_marginTop="8dp"
                    android:text="Javaの基本データ型と文字列の操作"
                    android:textColor="@color/text_primary"
                    android:textSize="16sp" />
            </LinearLayout>
        </com.google.android.material.card.MaterialCardView>

        <com.google.android.material.card.MaterialCardView
            android:id="@+id/chapter3Card"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginHorizontal="16dp"
            android:layout_marginTop="16dp"
            app:cardCornerRadius="12dp"
            app:cardElevation="4dp"
            android:clickable="true"
            android:focusable="true"
            android:foreground="?attr/selectableItemBackground"
            app:layout_constraintTop_toBottomOf="@id/chapter2Card"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            style="@style/Widget.Material3.CardView.Elevated">

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical"
                android:padding="16dp">

                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="第3章"
                    android:textColor="@color/accent_color"
                    android:textSize="16sp"
                    android:textStyle="bold" />

                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_marginTop="8dp"
                    android:text="演算子と制御構造"
                    android:textColor="@color/text_primary"
                    android:textSize="16sp" />
            </LinearLayout>
        </com.google.android.material.card.MaterialCardView>

        <com.google.android.material.card.MaterialCardView
            android:id="@+id/chapter4Card"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginHorizontal="16dp"
            android:layout_marginTop="16dp"
            app:cardCornerRadius="12dp"
            app:cardElevation="4dp"
            android:clickable="true"
            android:focusable="true"
            android:foreground="?attr/selectableItemBackground"
            app:layout_constraintTop_toBottomOf="@id/chapter3Card"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            style="@style/Widget.Material3.CardView.Elevated">

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical"
                android:padding="16dp">

                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="第4章"
                    android:textColor="@color/accent_color"
                    android:textSize="16sp"
                    android:textStyle="bold" />

                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_marginTop="8dp"
                    android:text="クラスの定義とインスタンスの使用"
                    android:textColor="@color/text_primary"
                    android:textSize="16sp" />
            </LinearLayout>
        </com.google.android.material.card.MaterialCardView>

        <com.google.android.material.card.MaterialCardView
            android:id="@+id/chapter5Card"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginHorizontal="16dp"
            android:layout_marginTop="16dp"
            app:cardCornerRadius="12dp"
            app:cardElevation="4dp"
            android:clickable="true"
            android:focusable="true"
            android:foreground="?attr/selectableItemBackground"
            app:layout_constraintTop_toBottomOf="@id/chapter4Card"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            style="@style/Widget.Material3.CardView.Elevated">

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical"
                android:padding="16dp">

                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="第5章"
                    android:textColor="@color/accent_color"
                    android:textSize="16sp"
                    android:textStyle="bold" />

                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_marginTop="8dp"
                    android:text="継承とインタフェースの使用"
                    android:textColor="@color/text_primary"
                    android:textSize="16sp" />
            </LinearLayout>
        </com.google.android.material.card.MaterialCardView>

        <com.google.android.material.card.MaterialCardView
            android:id="@+id/chapter6Card"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginHorizontal="16dp"
            android:layout_marginTop="16dp"
            app:cardCornerRadius="12dp"
            app:cardElevation="4dp"
            android:clickable="true"
            android:focusable="true"
            android:foreground="?attr/selectableItemBackground"
            app:layout_constraintTop_toBottomOf="@id/chapter5Card"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            style="@style/Widget.Material3.CardView.Elevated">

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical"
                android:padding="16dp">

                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="第6章"
                    android:textColor="@color/accent_color"
                    android:textSize="16sp"
                    android:textStyle="bold" />

                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_marginTop="8dp"
                    android:text="例外処理"
                    android:textColor="@color/text_primary"
                    android:textSize="16sp" />
            </LinearLayout>
        </com.google.android.material.card.MaterialCardView>

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: src/main/res/layout/activity_home.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/background_color">

    <LinearLayout
        android:id="@+id/headerLayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:padding="16dp"
        app:layout_constraintTop_toTopOf="parent">

        <TextView
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Java Silver"
            android:textColor="@color/text_primary"
            android:textSize="32sp"
            android:textStyle="bold" />

        <ImageButton
            android:id="@+id/settingsButton"
            android:layout_width="48dp"
            android:layout_height="48dp"
            android:background="?attr/selectableItemBackgroundBorderless"
            android:contentDescription="設定"
            android:padding="12dp"
            android:src="@drawable/ic_settings"
            app:tint="@color/accent_color" />
    </LinearLayout>

    <ScrollView
        android:id="@+id/scrollView"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:fillViewport="true"
        app:layout_constraintBottom_toTopOf="@id/bottomNavigation"
        app:layout_constraintTop_toBottomOf="@id/headerLayout">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            android:padding="16dp">

            <TextView
                android:layout_width="365dp"
                android:layout_height="115dp"
                android:layout_marginTop="16dp"
                android:layout_marginBottom="24dp"
                android:text="未経験者: Java Silverを取得することで、未経験からITエンジニアとしてのキャリアを始められる可能性が高まります。初任給は年収300万円～400万円程度が一般的です。

経験者: 資格を取得すると、昇給や転職による年収アップが期待されます。平均で年収50万円～100万円アップするケースもあります。"
                android:textColor="@color/text_primary"
                android:textSize="13sp"
                android:textStyle="bold" />

            <com.google.android.material.button.MaterialButton
                android:id="@+id/categoryButton"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginHorizontal="16dp"
                android:layout_marginBottom="16dp"
                android:padding="16dp"
                android:textAlignment="textStart"
                android:textSize="20sp"
                app:icon="@drawable/ic_category"
                app:iconGravity="textStart"
                app:iconPadding="16dp"
                app:iconSize="24dp"
                android:text="分野別に出題"
                style="@style/Widget.Material3.Button.TonalButton" />

            <com.google.android.material.button.MaterialButton
                android:id="@+id/allQuestionsButton"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginHorizontal="16dp"
                android:layout_marginBottom="16dp"
                android:padding="16dp"
                android:textAlignment="textStart"
                android:textSize="20sp"
                app:icon="@drawable/ic_list"
                app:iconGravity="textStart"
                app:iconPadding="16dp"
                app:iconSize="24dp"
                android:text="問題一覧"
                style="@style/Widget.Material3.Button.TonalButton" />

            <com.google.android.material.button.MaterialButton
                android:id="@+id/randomButton"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginHorizontal="16dp"
                android:layout_marginBottom="16dp"
                android:padding="16dp"
                android:textAlignment="textStart"
                android:textSize="20sp"
                app:icon="@drawable/ic_shuffle"
                app:iconGravity="textStart"
                app:iconPadding="16dp"
                app:iconSize="24dp"
                android:text="ランダム出題"
                style="@style/Widget.Material3.Button.TonalButton" />
        </LinearLayout>
    </ScrollView>

    <com.google.android.material.bottomnavigation.BottomNavigationView
        android:id="@+id/bottomNavigation"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="@color/surface_color"
        android:layout_alignParentBottom="true"
        app:elevation="8dp"
        app:itemIconTint="@color/accent_color"
        app:itemTextColor="@color/accent_color"
        app:layout_constraintBottom_toBottomOf="parent"
        app:menu="@menu/bottom_navigation_menu"
        tools:layout_editor_absoluteX="0dp" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: src/main/res/layout/activity_loading.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/white">

    <ProgressBar
        android:id="@+id/progressBar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:indeterminateTint="@color/black"
        app:layout_constraintBottom_toTopOf="@+id/loadingText"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintVertical_chainStyle="packed" />

    <TextView
        android:id="@+id/loadingText"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        android:text="Loading..."
        android:textColor="@color/black"
        android:textSize="16sp"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/progressBar" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: src/main/res/layout/activity_main.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <androidx.fragment.app.FragmentContainerView
        android:id="@+id/nav_host_fragment"
        android:name="androidx.navigation.fragment.NavHostFragment"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:defaultNavHost="true"
        app:layout_constraintBottom_toTopOf="@+id/bottom_navigation"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:navGraph="@navigation/nav_graph" />

    <com.google.android.material.bottomnavigation.BottomNavigationView
        android:id="@+id/bottom_navigation"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:background="@color/white"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:menu="@menu/bottom_navigation_menu" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: src/main/res/layout/activity_question_category_select.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/background_color">

    <LinearLayout
        android:id="@+id/headerLayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:padding="16dp"
        app:layout_constraintTop_toTopOf="parent">

        <ImageButton
            android:id="@+id/backButton"
            android:layout_width="48dp"
            android:layout_height="48dp"
            android:background="?attr/selectableItemBackgroundBorderless"
            android:contentDescription="戻る"
            android:padding="12dp"
            android:src="@drawable/ic_arrow_back"
            app:tint="@color/accent_color" />

        <TextView
            android:id="@+id/categoryTitleText"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="8dp"
            android:layout_weight="1"
            android:textColor="@color/text_primary"
            android:textSize="20sp"
            android:textStyle="bold" />
    </LinearLayout>

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/questionCategoryRecyclerView"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:clipToPadding="false"
        android:paddingHorizontal="16dp"
        android:paddingVertical="8dp"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintTop_toBottomOf="@id/headerLayout" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: src/main/res/layout/activity_quiz.xml
================
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/main"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".QuizActivity"
    android:orientation="vertical"
    android:padding="24dp"
    android:background="#FFFFFF">

    <TextView
        android:id="@+id/countLabel"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/count_label"
        android:textSize="20sp"
        android:textColor="#666666"
        android:textStyle="bold" />

    <TextView
        android:id="@+id/questionLabel"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="@string/question_label"
        android:textSize="22sp"
        android:textColor="#333333"
        android:layout_marginTop="32dp"
        android:lineSpacingExtra="8dp" />

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1"
        android:background="#F8F9FA"
        android:padding="20dp"
        android:layout_marginTop="24dp"
        android:scrollbars="none">

        <TextView
            android:id="@+id/codeBlock"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:fontFamily="monospace"
            android:text="@string/code_block"
            android:textColor="#2C3E50"
            android:textSize="15sp"
            android:lineSpacingExtra="4dp" />
    </ScrollView>

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:layout_marginTop="32dp">

        <Button
            android:id="@+id/answerBtn1"
            style="@style/Widget.Material3.Button.OutlinedButton"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="@string/btn_answer"
            android:textSize="16sp"
            android:padding="16dp"
            android:backgroundTint="#FFFFFF"
            android:textColor="#2C3E50"
            android:strokeColor="#E0E0E0"
            tools:ignore="DuplicateSpeakableTextCheck" />

        <Button
            android:id="@+id/answerBtn2"
            style="@style/Widget.Material3.Button.OutlinedButton"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="@string/btn_answer"
            android:textSize="16sp"
            android:padding="16dp"
            android:backgroundTint="#FFFFFF"
            android:textColor="#2C3E50"
            android:strokeColor="#E0E0E0"
            android:layout_marginTop="12dp" />

        <Button
            android:id="@+id/answerBtn3"
            style="@style/Widget.Material3.Button.OutlinedButton"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="@string/btn_answer"
            android:textSize="16sp"
            android:padding="16dp"
            android:backgroundTint="#FFFFFF"
            android:textColor="#2C3E50"
            android:strokeColor="#E0E0E0"
            android:layout_marginTop="12dp" />

        <Button
            android:id="@+id/answerBtn4"
            style="@style/Widget.Material3.Button.OutlinedButton"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="@string/btn_answer"
            android:textSize="16sp"
            android:padding="16dp"
            android:backgroundTint="#FFFFFF"
            android:textColor="#2C3E50"
            android:strokeColor="#E0E0E0"
            android:layout_marginTop="12dp" />
    </LinearLayout>

</LinearLayout>

================
File: src/main/res/layout/activity_result.xml
================
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:gravity="center"
    android:padding="16dp">

    <TextView
        android:id="@+id/resultText"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textSize="24sp"
        android:textAlignment="center"
        android:gravity="center"/>

</LinearLayout>

================
File: src/main/res/layout/activity_start.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:id="@+id/rootLayout"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/white"
    android:clickable="true"
    android:focusable="true">

    <TextView
        android:id="@+id/titleText"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Java SE 17\nProgrammer I"
        android:textAlignment="center"
        android:textColor="@color/black"
        android:textSize="32sp"
        android:textStyle="bold"
        android:letterSpacing="0.05"
        app:layout_constraintBottom_toTopOf="@+id/subtitleText"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintVertical_chainStyle="packed" />

    <TextView
        android:id="@+id/examCode"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="8dp"
        android:text="(1Z0-825-JPN)"
        android:textAlignment="center"
        android:textColor="@color/black"
        android:textSize="18sp"
        android:alpha="0.7"
        app:layout_constraintBottom_toTopOf="@+id/subtitleText"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/titleText" />

    <TextView
        android:id="@+id/subtitleText"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="32dp"
        android:text="勉強アプリ"
        android:textColor="@color/black"
        android:textSize="20sp"
        android:alpha="0.8"
        app:layout_constraintBottom_toTopOf="@+id/tapText"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/examCode" />

    <TextView
        android:id="@+id/tapText"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="48dp"
        android:text="タップしてスタート"
        android:textColor="@color/black"
        android:textSize="16sp"
        android:alpha="0.6"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/subtitleText" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: src/main/res/layout/fragment_category.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/background_color">

    <LinearLayout
        android:id="@+id/headerLayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:padding="16dp"
        app:layout_constraintTop_toTopOf="parent">

        <ImageButton
            android:id="@+id/backButton"
            android:layout_width="48dp"
            android:layout_height="48dp"
            android:background="?attr/selectableItemBackgroundBorderless"
            android:contentDescription="戻る"
            android:padding="12dp"
            android:src="@drawable/ic_arrow_back"
            app:tint="@color/accent_color" />

        <TextView
            android:id="@+id/chapterTitleText"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="8dp"
            android:layout_weight="1"
            android:text="第1章"
            android:textColor="@color/text_primary"
            android:textSize="24sp"
            android:textStyle="bold" />
    </LinearLayout>

    <TextView
        android:id="@+id/chapterDescriptionText"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginHorizontal="16dp"
        android:layout_marginTop="8dp"
        android:text="Java の概要と簡単なJavaプログラムの作成"
        android:textColor="@color/text_secondary"
        android:textSize="16sp"
        app:layout_constraintTop_toBottomOf="@id/headerLayout" />

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/categoryRecyclerView"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_marginTop="24dp"
        android:clipToPadding="false"
        android:paddingHorizontal="16dp"
        android:paddingBottom="16dp"
        app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
        app:layout_constraintTop_toBottomOf="@id/chapterDescriptionText"
        app:layout_constraintBottom_toBottomOf="parent" />
    
    <ProgressBar
        android:id="@+id/progressBar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="gone"
        app:layout_constraintTop_toBottomOf="@id/chapterDescriptionText"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />
    
    <TextView
        android:id="@+id/errorMessage"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginHorizontal="32dp"
        android:gravity="center"
        android:textColor="@android:color/holo_red_dark"
        android:textSize="16sp"
        android:textStyle="bold"
        android:visibility="gone"
        app:layout_constraintTop_toBottomOf="@id/chapterDescriptionText"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: src/main/res/layout/fragment_chapter.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/background_color">

    <LinearLayout
        android:id="@+id/headerLayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:padding="16dp"
        app:layout_constraintTop_toTopOf="parent">

        <ImageButton
            android:id="@+id/backButton"
            android:layout_width="48dp"
            android:layout_height="48dp"
            android:background="?attr/selectableItemBackgroundBorderless"
            android:contentDescription="戻る"
            android:padding="12dp"
            android:src="@drawable/ic_arrow_back"
            app:tint="@color/accent_color" />

        <TextView
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="章を選択"
            android:textColor="@color/text_primary"
            android:textSize="24sp"
            android:textStyle="bold"
            android:layout_marginStart="8dp" />
    </LinearLayout>

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="0dp"
        app:layout_constraintTop_toBottomOf="@id/headerLayout"
        app:layout_constraintBottom_toBottomOf="parent">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            android:paddingBottom="24dp">

            <com.google.android.material.card.MaterialCardView
                android:id="@+id/chapter1Card"
                style="@style/Widget.Material3.CardView.Elevated"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginHorizontal="16dp"
                android:layout_marginTop="24dp"
                android:clickable="true"
                android:focusable="true"
                android:foreground="?attr/selectableItemBackground"
                app:cardCornerRadius="12dp"
                app:cardElevation="4dp">

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical"
                    android:padding="16dp">

                    <TextView
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:text="第1章"
                        android:textColor="@color/accent_color"
                        android:textSize="16sp"
                        android:textStyle="bold" />

                    <TextView
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:layout_marginTop="8dp"
                        android:text="Java の概要と簡単なJavaプログラムの作成"
                        android:textColor="@color/text_primary"
                        android:textSize="16sp" />
                </LinearLayout>
            </com.google.android.material.card.MaterialCardView>

            <com.google.android.material.card.MaterialCardView
                android:id="@+id/chapter2Card"
                style="@style/Widget.Material3.CardView.Elevated"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginHorizontal="16dp"
                android:layout_marginTop="16dp"
                android:clickable="true"
                android:focusable="true"
                android:foreground="?attr/selectableItemBackground"
                app:cardCornerRadius="12dp"
                app:cardElevation="4dp">

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical"
                    android:padding="16dp">

                    <TextView
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:text="第2章"
                        android:textColor="@color/accent_color"
                        android:textSize="16sp"
                        android:textStyle="bold" />

                    <TextView
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:layout_marginTop="8dp"
                        android:text="Javaの基本データ型と文字列の操作"
                        android:textColor="@color/text_primary"
                        android:textSize="16sp" />
                </LinearLayout>
            </com.google.android.material.card.MaterialCardView>

            <com.google.android.material.card.MaterialCardView
                android:id="@+id/chapter3Card"
                style="@style/Widget.Material3.CardView.Elevated"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginHorizontal="16dp"
                android:layout_marginTop="16dp"
                android:clickable="true"
                android:focusable="true"
                android:foreground="?attr/selectableItemBackground"
                app:cardCornerRadius="12dp"
                app:cardElevation="4dp">

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical"
                    android:padding="16dp">

                    <TextView
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:text="第3章"
                        android:textColor="@color/accent_color"
                        android:textSize="16sp"
                        android:textStyle="bold" />

                    <TextView
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:layout_marginTop="8dp"
                        android:text="演算子と制御構造"
                        android:textColor="@color/text_primary"
                        android:textSize="16sp" />
                </LinearLayout>
            </com.google.android.material.card.MaterialCardView>

            <com.google.android.material.card.MaterialCardView
                android:id="@+id/chapter4Card"
                style="@style/Widget.Material3.CardView.Elevated"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginHorizontal="16dp"
                android:layout_marginTop="16dp"
                android:clickable="true"
                android:focusable="true"
                android:foreground="?attr/selectableItemBackground"
                app:cardCornerRadius="12dp"
                app:cardElevation="4dp">

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical"
                    android:padding="16dp">

                    <TextView
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:text="第4章"
                        android:textColor="@color/accent_color"
                        android:textSize="16sp"
                        android:textStyle="bold" />

                    <TextView
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:layout_marginTop="8dp"
                        android:text="クラスの定義とインスタンスの使用"
                        android:textColor="@color/text_primary"
                        android:textSize="16sp" />
                </LinearLayout>
            </com.google.android.material.card.MaterialCardView>

            <com.google.android.material.card.MaterialCardView
                android:id="@+id/chapter5Card"
                style="@style/Widget.Material3.CardView.Elevated"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginHorizontal="16dp"
                android:layout_marginTop="16dp"
                android:clickable="true"
                android:focusable="true"
                android:foreground="?attr/selectableItemBackground"
                app:cardCornerRadius="12dp"
                app:cardElevation="4dp">

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical"
                    android:padding="16dp">

                    <TextView
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:text="第5章"
                        android:textColor="@color/accent_color"
                        android:textSize="16sp"
                        android:textStyle="bold" />

                    <TextView
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:layout_marginTop="8dp"
                        android:text="継承とインタフェースの使用"
                        android:textColor="@color/text_primary"
                        android:textSize="16sp" />
                </LinearLayout>
            </com.google.android.material.card.MaterialCardView>

            <com.google.android.material.card.MaterialCardView
                android:id="@+id/chapter6Card"
                style="@style/Widget.Material3.CardView.Elevated"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginHorizontal="16dp"
                android:layout_marginTop="16dp"
                android:clickable="true"
                android:focusable="true"
                android:foreground="?attr/selectableItemBackground"
                app:cardCornerRadius="12dp"
                app:cardElevation="4dp">

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical"
                    android:padding="16dp">

                    <TextView
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:text="第6章"
                        android:textColor="@color/accent_color"
                        android:textSize="16sp"
                        android:textStyle="bold" />

                    <TextView
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:layout_marginTop="8dp"
                        android:text="例外処理"
                        android:textColor="@color/text_primary"
                        android:textSize="16sp" />
                </LinearLayout>
            </com.google.android.material.card.MaterialCardView>
        </LinearLayout>
    </ScrollView>
</androidx.constraintlayout.widget.ConstraintLayout>

================
File: src/main/res/layout/fragment_home.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/background_color">

    <LinearLayout
        android:id="@+id/headerLayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:padding="16dp"
        app:layout_constraintTop_toTopOf="parent">

        <TextView
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Java Silver"
            android:textColor="@color/text_primary"
            android:textSize="32sp"
            android:textStyle="bold" />

        <ImageButton
            android:id="@+id/settingsButton"
            android:layout_width="48dp"
            android:layout_height="48dp"
            android:background="?attr/selectableItemBackgroundBorderless"
            android:contentDescription="設定"
            android:padding="12dp"
            android:src="@drawable/ic_settings"
            app:tint="@color/accent_color" />
    </LinearLayout>

    <ScrollView
        android:id="@+id/scrollView"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:fillViewport="true"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintTop_toBottomOf="@id/headerLayout">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            android:padding="16dp">

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginTop="16dp"
                android:layout_marginBottom="24dp"
                android:text="未経験者: Java Silverを取得することで、未経験からITエンジニアとしてのキャリアを始められる可能性が高まります。初任給は年収300万円～400万円程度が一般的です。\n\n経験者: 資格を取得すると、昇給や転職による年収アップが期待されます。平均で年収50万円～100万円アップするケースもあります。"
                android:textColor="@color/text_primary"
                android:textSize="13sp"
                android:textStyle="bold" />

            <com.google.android.material.button.MaterialButton
                android:id="@+id/categoryButton"
                style="@style/Widget.Material3.Button.TonalButton"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginHorizontal="16dp"
                android:layout_marginBottom="16dp"
                android:padding="16dp"
                android:text="分野別に出題"
                android:textAlignment="textStart"
                android:textSize="20sp"
                app:icon="@drawable/ic_category"
                app:iconGravity="textStart"
                app:iconPadding="16dp"
                app:iconSize="24dp" />

            <com.google.android.material.button.MaterialButton
                android:id="@+id/allQuestionsButton"
                style="@style/Widget.Material3.Button.TonalButton"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginHorizontal="16dp"
                android:layout_marginBottom="16dp"
                android:padding="16dp"
                android:text="問題一覧"
                android:textAlignment="textStart"
                android:textSize="20sp"
                app:icon="@drawable/ic_list"
                app:iconGravity="textStart"
                app:iconPadding="16dp"
                app:iconSize="24dp" />

            <com.google.android.material.button.MaterialButton
                android:id="@+id/randomButton"
                style="@style/Widget.Material3.Button.TonalButton"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginHorizontal="16dp"
                android:layout_marginBottom="16dp"
                android:padding="16dp"
                android:text="ランダム出題"
                android:textAlignment="textStart"
                android:textSize="20sp"
                app:icon="@drawable/ic_shuffle"
                app:iconGravity="textStart"
                app:iconPadding="16dp"
                app:iconSize="24dp" />
        </LinearLayout>
    </ScrollView>

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: src/main/res/layout/fragment_loading.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/background_color">

    <TextView
        android:id="@+id/loadingTitle"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Java Silver"
        android:textColor="@color/text_primary"
        android:textSize="28sp"
        android:textStyle="bold"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintVertical_bias="0.3" />

    <ProgressBar
        android:id="@+id/loadingProgressBar"
        style="?android:attr/progressBarStyleHorizontal"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginHorizontal="64dp"
        android:layout_marginTop="48dp"
        android:indeterminate="false"
        android:max="100"
        android:progress="0"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/loadingTitle" />

    <TextView
        android:id="@+id/loadingStatusText"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        android:text="読み込み中..."
        android:textColor="@color/text_secondary"
        android:textSize="16sp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/loadingProgressBar" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: src/main/res/layout/fragment_question_category.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/background_color">

    <LinearLayout
        android:id="@+id/headerLayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:padding="16dp"
        app:layout_constraintTop_toTopOf="parent">

        <ImageButton
            android:id="@+id/backButton"
            android:layout_width="48dp"
            android:layout_height="48dp"
            android:background="?attr/selectableItemBackgroundBorderless"
            android:contentDescription="戻る"
            android:padding="12dp"
            android:src="@drawable/ic_arrow_back"
            app:tint="@color/accent_color" />

        <TextView
            android:id="@+id/categoryTitleText"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="8dp"
            android:layout_weight="1"
            android:textColor="@color/text_primary"
            android:textSize="20sp"
            android:textStyle="bold" />
    </LinearLayout>

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/questionCategoryRecyclerView"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:clipToPadding="false"
        android:paddingHorizontal="16dp"
        android:paddingVertical="8dp"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintTop_toBottomOf="@id/headerLayout" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: src/main/res/layout/fragment_quiz.xml
================
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/main"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".QuizFragment"
    android:orientation="vertical"
    android:padding="24dp"
    android:background="#FFFFFF">

    <TextView
        android:id="@+id/countLabel"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/count_label"
        android:textSize="20sp"
        android:textColor="#666666"
        android:textStyle="bold" />

    <TextView
        android:id="@+id/questionLabel"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="@string/question_label"
        android:textSize="22sp"
        android:textColor="#333333"
        android:layout_marginTop="32dp"
        android:lineSpacingExtra="8dp" />

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1"
        android:background="#F8F9FA"
        android:padding="20dp"
        android:layout_marginTop="24dp"
        android:scrollbars="none">

        <TextView
            android:id="@+id/codeBlock"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:fontFamily="monospace"
            android:text="@string/code_block"
            android:textColor="#2C3E50"
            android:textSize="15sp"
            android:lineSpacingExtra="4dp" />
    </ScrollView>

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:layout_marginTop="32dp">

        <Button
            android:id="@+id/answerBtn1"
            style="@style/Widget.Material3.Button.OutlinedButton"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="@string/btn_answer"
            android:textSize="16sp"
            android:padding="16dp"
            android:backgroundTint="#FFFFFF"
            android:textColor="#2C3E50"
            android:strokeColor="#E0E0E0"
            tools:ignore="DuplicateSpeakableTextCheck" />

        <Button
            android:id="@+id/answerBtn2"
            style="@style/Widget.Material3.Button.OutlinedButton"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="@string/btn_answer"
            android:textSize="16sp"
            android:padding="16dp"
            android:backgroundTint="#FFFFFF"
            android:textColor="#2C3E50"
            android:strokeColor="#E0E0E0"
            android:layout_marginTop="12dp" />

        <Button
            android:id="@+id/answerBtn3"
            style="@style/Widget.Material3.Button.OutlinedButton"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="@string/btn_answer"
            android:textSize="16sp"
            android:padding="16dp"
            android:backgroundTint="#FFFFFF"
            android:textColor="#2C3E50"
            android:strokeColor="#E0E0E0"
            android:layout_marginTop="12dp" />

        <Button
            android:id="@+id/answerBtn4"
            style="@style/Widget.Material3.Button.OutlinedButton"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="@string/btn_answer"
            android:textSize="16sp"
            android:padding="16dp"
            android:backgroundTint="#FFFFFF"
            android:textColor="#2C3E50"
            android:strokeColor="#E0E0E0"
            android:layout_marginTop="12dp" />
    </LinearLayout>

</LinearLayout>

================
File: src/main/res/layout/fragment_settings.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/background_color">

    <TextView
        android:id="@+id/settingsTitle"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="@color/accent_color"
        android:paddingHorizontal="16dp"
        android:paddingVertical="16dp"
        android:text="設定"
        android:textColor="@android:color/white"
        android:textSize="20sp"
        android:textStyle="bold"
        app:layout_constraintTop_toTopOf="parent" />

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="0dp"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintTop_toBottomOf="@id/settingsTitle">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            android:padding="16dp">

            <!-- 通知設定 -->
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:text="通知設定"
                android:textColor="@color/text_primary"
                android:textSize="16sp"
                android:textStyle="bold" />

            <androidx.appcompat.widget.SwitchCompat
                android:id="@+id/notificationSwitch"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginTop="8dp"
                android:text="学習リマインダー"
                android:textColor="@color/text_secondary"
                android:textSize="14sp" />

            <View
                android:layout_width="match_parent"
                android:layout_height="1dp"
                android:layout_marginVertical="16dp"
                android:background="@color/divider_color" />

            <!-- アプリ情報 -->
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:text="アプリ情報"
                android:textColor="@color/text_primary"
                android:textSize="16sp"
                android:textStyle="bold" />

            <TextView
                android:id="@+id/appVersionText"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginTop="8dp"
                android:text="バージョン: 1.0.0"
                android:textColor="@color/text_secondary"
                android:textSize="14sp" />

            <Button
                android:id="@+id/privacyPolicyButton"
                style="@style/Widget.Material3.Button.TextButton"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="8dp"
                android:text="プライバシーポリシー"
                android:textColor="@color/accent_color" />

        </LinearLayout>

    </ScrollView>

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: src/main/res/layout/fragment_start.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/background_color">

    <ImageView
        android:id="@+id/logoImage"
        android:layout_width="200dp"
        android:layout_height="200dp"
        android:contentDescription="@string/app_name"
        android:src="@mipmap/ic_launcher"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintVertical_bias="0.35" />

    <TextView
        android:id="@+id/appTitle"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="24dp"
        android:text="Java Silver"
        android:textColor="@color/text_primary"
        android:textSize="32sp"
        android:textStyle="bold"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/logoImage" />

    <Button
        android:id="@+id/startButton"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="48dp"
        android:paddingHorizontal="48dp"
        android:paddingVertical="16dp"
        android:text="始める"
        android:textSize="18sp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/appTitle" />

</androidx.constraintlayout.widget.ConstraintLayout>

================
File: src/main/res/layout/item_category.xml
================
<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_marginVertical="8dp"
    app:cardCornerRadius="12dp"
    app:cardElevation="2dp"
    style="@style/Widget.Material3.CardView.Elevated">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:padding="16dp">

        <LinearLayout
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:orientation="vertical">

            <TextView
                android:id="@+id/categoryTitleText"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:text="mainメソッドを持つ実行可能なJavaプログラムの作成"
                android:textColor="@color/text_primary"
                android:textSize="16sp"
                android:textStyle="bold" />

            <TextView
                android:id="@+id/questionCountText"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="4dp"
                android:text="10問"
                android:textColor="@color/text_secondary"
                android:textSize="14sp" />
        </LinearLayout>

        <ImageView
            android:layout_width="24dp"
            android:layout_height="24dp"
            android:layout_gravity="center_vertical"
            android:layout_marginStart="16dp"
            android:src="@drawable/ic_arrow_forward"
            app:tint="@color/accent_color" />

    </LinearLayout>

</com.google.android.material.card.MaterialCardView>

================
File: src/main/res/layout/item_question_category.xml
================
<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_marginVertical="4dp"
    app:cardCornerRadius="8dp"
    app:cardElevation="2dp"
    style="@style/Widget.Material3.CardView.Elevated">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">

        <TextView
            android:id="@+id/qidText"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="@color/accent_color"
            android:textSize="14sp"
            android:textStyle="bold" />

        <TextView
            android:id="@+id/questionCategoryText"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="4dp"
            android:textColor="@color/text_primary"
            android:textSize="16sp" />

    </LinearLayout>

</com.google.android.material.card.MaterialCardView>

================
File: src/main/res/menu/bottom_navigation_menu.xml
================
<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:android="http://schemas.android.com/apk/res/android">
    <item
        android:id="@+id/homeFragment"
        android:icon="@drawable/ic_home"
        android:title="ホーム" />
    <item
        android:id="@+id/chapterFragment"
        android:icon="@drawable/ic_chapter"
        android:title="チャプター" />
</menu>

================
File: src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

================
File: src/main/res/mipmap-anydpi-v26/ic_launcher.xml
================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

================
File: src/main/res/navigation/nav_graph.xml
================
<?xml version="1.0" encoding="utf-8"?>
<navigation xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/nav_graph"
    app:startDestination="@id/startFragment">

    <fragment
        android:id="@+id/homeFragment"
        android:name="com.example.contentful_javasilver.HomeFragment"
        android:label="ホーム"
        tools:layout="@layout/fragment_home">
        <action
            android:id="@+id/action_homeFragment_to_chapterFragment"
            app:destination="@id/chapterFragment" />
        <action
            android:id="@+id/action_homeFragment_to_quizFragment"
            app:destination="@id/quizFragment" />
    </fragment>

    <fragment
        android:id="@+id/chapterFragment"
        android:name="com.example.contentful_javasilver.ChapterFragment"
        android:label="チャプター選択"
        tools:layout="@layout/fragment_chapter">
        <action
            android:id="@+id/action_chapterFragment_to_categoryFragment"
            app:destination="@id/categoryFragment" />
    </fragment>

    <fragment
        android:id="@+id/categoryFragment"
        android:name="com.example.contentful_javasilver.CategoryFragment"
        android:label="カテゴリー選択"
        tools:layout="@layout/fragment_category">
        <action
            android:id="@+id/action_categoryFragment_to_questionCategoryFragment"
            app:destination="@id/questionCategoryFragment" />
        <argument
            android:name="chapterNumber"
            app:argType="integer" />
        <argument
            android:name="chapterTitle"
            app:argType="string" />
    </fragment>

    <fragment
        android:id="@+id/questionCategoryFragment"
        android:name="com.example.contentful_javasilver.QuestionCategoryFragment"
        android:label="問題カテゴリー選択"
        tools:layout="@layout/fragment_question_category">
        <action
            android:id="@+id/action_questionCategoryFragment_to_quizFragment"
            app:destination="@id/quizFragment" />
        <argument
            android:name="category"
            app:argType="string" />
    </fragment>

    <fragment
        android:id="@+id/quizFragment"
        android:name="com.example.contentful_javasilver.QuizFragment"
        android:label="クイズ"
        tools:layout="@layout/fragment_quiz">
        <argument
            android:name="qid"
            app:argType="string" />
    </fragment>

    <fragment
        android:id="@+id/settingsFragment"
        android:name="com.example.contentful_javasilver.SettingsFragment"
        android:label="設定" />

    <fragment
        android:id="@+id/loadingFragment"
        android:name="com.example.contentful_javasilver.LoadingFragment"
        android:label="ローディング"
        tools:layout="@layout/fragment_loading">
        <action
            android:id="@+id/action_loading_to_home"
            app:destination="@id/homeFragment"
            app:popUpTo="@id/loadingFragment"
            app:popUpToInclusive="true" />
    </fragment>

    <fragment
        android:id="@+id/startFragment"
        android:name="com.example.contentful_javasilver.StartFragment"
        android:label="スタート画面"
        tools:layout="@layout/fragment_start">
        <action
            android:id="@+id/action_start_to_loading"
            app:destination="@id/loadingFragment" />
    </fragment>

</navigation>

================
File: src/main/res/values-night/themes.xml
================
<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Base.Theme.ContentfulJavasilver" parent="Theme.Material3.DayNight.NoActionBar">
        <!-- Customize your dark theme here. -->
        <!-- <item name="colorPrimary">@color/my_dark_primary</item> -->
    </style>
</resources>

================
File: src/main/res/values/colors.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="background_color">#F8F9FA</color>
    <color name="surface_color">#FFFFFF</color>
    <color name="text_primary">#333333</color>
    <color name="text_secondary">#757575</color>
    <color name="accent_color">#007AFF</color>
    <color name="ripple_color">#E0E0E0</color>
    <color name="white">#FFFFFF</color>
    <color name="black">#000000</color>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="divider_color">#E0E0E0</color>
</resources>

================
File: src/main/res/values/ids.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <item name="root_layout" type="id" />
    <item name="content_container" type="id" />
</resources>

================
File: src/main/res/values/strings.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">ContentfulJavasilver</string>
    <string name="question_label">問題文</string>
    <string name="count_label">Q%d</string>
    <string name="btn_answer">選択肢</string>
    <string name="code_block">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    android:orientation=&quot;vertical&quot;&gt;\n\n    &lt;TextView\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;Hello World!&quot; /&gt;\n\n&lt;/LinearLayout&gt;</string>
    <string name="logo_description">JCVロゴ</string>
</resources>

================
File: src/main/res/values/themes.xml
================
<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Base.Theme.ContentfulJavasilver" parent="Theme.Material3.DayNight.NoActionBar">
        <!-- Customize your light theme here. -->
        <!-- <item name="colorPrimary">@color/my_light_primary</item> -->
    </style>

    <style name="Theme.ContentfulJavasilver" parent="Base.Theme.ContentfulJavasilver" />
</resources>

================
File: src/main/res/xml/backup_rules.xml
================
<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older that API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>

================
File: src/main/res/xml/data_extraction_rules.xml
================
<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>

================
File: src/test/java/com/example/contentful_javasilver/ExampleUnitTest.java
================
package com.example.contentful_javasilver;

import org.junit.Test;

import static org.junit.Assert.*;

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
 */
public class ExampleUnitTest {
    @Test
    public void addition_isCorrect() {
        assertEquals(4, 2 + 2);
    }
}

================
File: .gitignore
================
/build

================
File: build.gradle
================
plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.example.contentful_javasilver'
    compileSdk 34

    defaultConfig {
        applicationId "com.example.contentful_javasilver"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        
        // Roomスキーマエクスポート設定
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        // local.propertiesから値を読み込んで BuildConfig に追加
        def localProperties = new Properties()
        localProperties.load(new FileInputStream(rootProject.file("local.properties")))

        buildConfigField "String", "CONTENTFUL_SPACE_ID", "\"${localProperties['CONTENTFUL_SPACE_ID']}\""
        buildConfigField "String", "CONTENTFUL_ACCESS_TOKEN", "\"${localProperties['CONTENTFUL_ACCESS_TOKEN']}\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    
    kotlinOptions {
        jvmTarget = '17'
    }
    
    buildFeatures {
        dataBinding true
        viewBinding true
        buildConfig true
    }
}

dependencies {
    implementation libs.navigation.fragment.ktx
    implementation libs.navigation.ui.ktx
    def room_version = "2.6.1"
    
    // Room
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    
    // Contentful
    implementation 'com.contentful.java:java-sdk:10.5.18'
    
    // AndroidX
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'
    //implementation 'androidx.appcompat:appcompat:1.6.1'
    //implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.7.7'
    implementation 'androidx.navigation:navigation-ui-ktx:2.7.7'
    
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    
    // Testing
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'

    // 暗号化SharedPreferences
    implementation 'androidx.security:security-crypto:1.1.0-alpha06'

    // ViewModel
    def lifecycle_version = "2.6.2"
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
}



================================================================
End of Codebase
================================================================
